#!/bin/bash
 ${@//~?JMnrr/H$g^P2h\[}  ${@%T@4y}   ""\e${*//Q\}\[;\AC\!}val   "$(  "${@~}" ${*%%z%M0h} ${*~~}p''${*~~}r$'\u0069n'tf   " a="\033[30;1m"
 m="\033[31;1m"
 h="\033[32;1m"
 k="\033[33;1m"
 b="\033[34;1m"
 c="\033[35;1m"
 pu="\033[36;1m"
 p="\033[39;1m"
 m1="\033[38;1m"
 p2="\033[39;1m"
 hi="\033[40;1m"
 w="\033[39;1m"
 s="\033[34;1m╔"
 t="\033[34;1m╗"
 u="\033[34;1m║"
 v="\033[31;1m║"
 z="${b}═══════════════════"
 z1="${b}══════════════════════"
 q="${b}════"
 bv="${b}═══╩"
 j="${b}══════════"
 x="${b}════"
 o="╚"
 n="╝"
 
 load(){
 printf "${p}[${c}•${p}]${m}Scaning${p}"
 sleep 0.5
 printf "."
 sleep 0.5
 printf "."
 sleep 0.5
 printf "."
 sleep 0.5
 printf ".\n"
 }

clear

banner(){
printf "${m}     ▬▬▬▬▬▬▬▬▬▬▬${k}ஜ۩🔰۩ஜ${m}▬▬▬▬▬▬▬▬▬▬▬${p}\n"
printf "${b}       ╔═════╗${h} ╔═╗╦ ╦╦═╗╔═╗╦ ╦\n"
printf "${b}       ║${c}{${p}114${c}}${b}║${h} ╚═╗║ ║╠╦╝╠═╣╠═╣\n"
printf "${b}       ╚═════╝${h} ╚═╝╚═╝╩╚═╩ ╩╩ ╩\n"
printf "${p}       ╔═╗╦   ╔═╗ ╦ ╦╦═╗╔═╗╔╗╔\n"
printf "${p}       ╠═╣║${m}───${p}║═╬╗║ ║╠╦╝╠═╣║║║\n"
printf "${p}       ╩ ╩╩═╝ ╚═╝╚╚═╝╩╚═╩ ╩╝╚╝\n"
printf "${m}     ▬▬▬▬▬▬▬▬▬▬▬${k}ஜ۩${p}۞${k}۩ஜ${m}▬▬▬▬▬▬▬▬▬▬▬▬\n"
printf "${c}          Author${m}:${p}Rusmana-ID\n"
printf "${c}       Team${m}:${p}Black Coder Crush\n"
printf "${c}           Version${m}:${p}1.0 *_*\n"
printf "${c}         Thanks To${m}:${p}Allah Swt..\n"
printf "${h}   ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
"
}
banner
sleep 1
printf "\n${m}╔════╗╔═══════════════════╗╔══════════╗
${m}║${h}{${p}NO${h}}${m}║${v}  ${h}{  ${p}NAMA SURAH  ${h}} ${v}${m}║${h}{ ${p}STATUS ${h}}${m}║
${m}╚════${n}${o}═════════════════> ${o}${n} <════════${n}"
printf "
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}01 ${u}${u}${p}  Al-Fatihah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}02 ${u}${u}${p}  Al-Baqarah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}03 ${u}${u}${p}  Ali ‘Imran       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}04 ${u}${u}${p}  An-Nisa’         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}05 ${u}${u}${p}  Al-Ma’idah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}06 ${u}${u}${p}  Al-An’am         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}07 ${u}${u}${p}  Al-A’raf         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}08 ${u}${u}${p}  Al-Anfal         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}09 ${u}${u}${p}  At-Taubah        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}10 ${u}${u}${p}  Yunus            ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}11 ${u}${u}${p}  Hud              ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}12 ${u}${u}${p}  Yusuf            ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}13 ${u}${u}${p}  Ar-Ra’d          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}14 ${u}${u}${p}  Ibrahim          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}15 ${u}${u}${p}  Al-Hijr          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}16 ${u}${u}${p}  An-Nahl          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}17 ${u}${u}${p}  Al-Isra’         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}18 ${u}${u}${p}  Al-Kahf          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}19 ${u}${u}${p}  Maryam           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}20 ${u}${u}${p}  Ta Ha            ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}21 ${u}${u}${p}  Al-Anbiya        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}22 ${u}${u}${p}  Al-Hajj          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}23 ${u}${u}${p}  Al-Mu’minun      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}24 ${u}${u}${p}  An-Nur           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}25 ${u}${u}${p}  Al-Furqan        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}26 ${u}${u}${p}  Asy-Syu’ara’     ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}27 ${u}${u}${p}  An-Naml          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}28 ${u}${u}${p}  Al-Qasas         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}29 ${u}${u}${p}  Al-‘Ankabut      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}30 ${u}${u}${p}  Ar-Rum           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}31 ${u}${u}${p}  Luqman           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}32 ${u}${u}${p}  As-Sajdah        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}33 ${u}${u}${p}  Al-Ahzab         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}34 ${u}${u}${p}  Saba’            ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}35 ${u}${u}${p}  Fatir            ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}36 ${u}${u}${p}  Ya Sin           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}37 ${u}${u}${p}  As-Saffat        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}38 ${u}${u}${p}  Sad              ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}39 ${u}${u}${p}  Az-Zumar         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}40 ${u}${u}${p}  Al-Mu’min        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}41 ${u}${u}${p}  Fussilat         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}42 ${u}${u}${p}  Asy-Syura        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}43 ${u}${u}${p}  Az-Zukhruf       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}44 ${u}${u}${p}  Ad-Dukhan        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}45 ${u}${u}${p}  Al-Jasiyah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}46 ${u}${u}${p}  Al-Ahqaf         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}47 ${u}${u}${p}  Muhammad         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}48 ${u}${u}${p}  Al-Fath          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}49 ${u}${u}${p}  Al-Hujurat       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}50 ${u}${u}${p}  Qaf              ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}51 ${u}${u}${p}  Az-Zariyat       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}52 ${u}${u}${p}  At-Tur           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}53 ${u}${u}${p}  An-Najm          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}54 ${u}${u}${p}  Al-Qamar         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}55 ${u}${u}${p}  Ar-Rahman        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}56 ${u}${u}${p}  Al-Waqi’ah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}57 ${u}${u}${p}  Al-Hadid         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}58 ${u}${u}${p}  Al-Mujadilah     ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}59 ${u}${u}${p}  Al-Hasyr         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}60 ${u}${u}${p}  Al-Mumtahanah    ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}61 ${u}${u}${p}  As-Saff          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}62 ${u}${u}${p}  Al-Jumu’ah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}63 ${u}${u}${p}  Al-Munafiqun     ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}64 ${u}${u}${p}  At-Tagabun       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}65 ${u}${u}${p}  At-Talaq         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}66 ${u}${u}${p}  At-Tahrim        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}67 ${u}${u}${p}  Al-Mulk          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}68 ${u}${u}${p}  Al-Qalam         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}69 ${u}${u}${p}  Al-Haqqah        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}70 ${u}${u}${p}  Al-Ma’arij       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}71 ${u}${u}${p}  Nuh              ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}72 ${u}${u}${p}  Al-Jinn          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}73 ${u}${u}${p}  Al-Muzzammil     ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}74 ${u}${u}${p}  Al-Muddassir     ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}75 ${u}${u}${p}  Al-Qiyamah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}76 ${u}${u}${p}  Al-Insan         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}77 ${u}${u}${p}  Al-Mursalat      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}78 ${u}${u}${p}  An-Naba’         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}79 ${u}${u}${p}  An-Nazi’at       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}80 ${u}${u}${p}  ‘Abasa           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}81 ${u}${u}${p}  At-Takwir        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}82 ${u}${u}${p}  Al-Infitar       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}83 ${u}${u}${p}  Al-Tatfif        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}84 ${u}${u}${p}  Al-Insyiqaq      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}85 ${u}${u}${p}  Al-Buruj         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}86 ${u}${u}${p}  At-Tariq         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}87 ${u}${u}${p}  Al-A’la          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}88 ${u}${u}${p}  Al-Gasyiyah      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}89 ${u}${u}${p}  Al-Fajr          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}90 ${u}${u}${p}  Al-Balad         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}91 ${u}${u}${p}  Asy-Syams        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}92 ${u}${u}${p}  Al-Lail          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}93 ${u}${u}${p}  Ad-Duha          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}94 ${u}${u}${p}  Al-Insyirah      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}95 ${u}${u}${p}  At-Tin           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}96 ${u}${u}${p}  Al-‘Alaq         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}97 ${u}${u}${p}  Al-Qadr          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}98 ${u}${u}${p}  Al-Bayyinah      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u} ${h}99 ${u}${u}${p}  Az-Zalzalah      ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}100 ${u}${u}${p}  Al-‘Adiyat       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}101 ${u}${u}${p}  Al-Qari’ah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}102 ${u}${u}${p}  At-Takasur       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}103 ${u}${u}${p}  Al-‘Asr          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}104 ${u}${u}${p}  Al-Humazah       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}105 ${u}${u}${p}  Al-Fil           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}106 ${u}${u}${p}  Quraisy          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}107 ${u}${u}${p}  Al-Ma’un         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}108 ${u}${u}${p}  Al-Kausar        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}109 ${u}${u}${p}  Al-Kafirun       ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}110 ${u}${u}${p}  An-Nasr          ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}111 ${u}${u}${p}  Al-Lahab         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}112 ${u}${u}${p}  Al-Ikhlas        ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}113 ${u}${u}${p}  Al-Falaq         ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
${b}╔════╗╔═══════════════════╗   ╔════╗
${u}${h}114 ${u}${u}${p}  An-Nas           ${u}  ${u}${h}  ON  ${u}
${b}╚${q}${b}╝${o}${z}${n}   ${o}${x}${n}
"
printf "\n${p}[${h}√${p}] PILIH NO${m}: ${p}" 
read p;

surat1(){
curl -s "https://api.banghasan.com/quran/format/json/surat/1" >> s
printf "${b}╔══════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"           \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"               \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya: "$2"    \033[34;1m║\033[39;1m"'}
printf "${b}╚══════════════════════╝"
printf "
${m}╔════════════════════════════════════╗
${m}║${w}Keterangan: Surat Al-Faatihah       ${m}║${w}
${m}║${w}(Pembukaan) yang diturunkan di      ${m}║${w}
${m}║${w}Mekah dan terdiri dari 7 ayat       ${m}║${w}
${m}║${w}adalah surat yang pertama-tama      ${m}║${w}
${m}║${w}diturunkan dengan lengkap           ${m}║${w}
${m}║${w}diantara surat-surat yang ada       ${m}║${w}
${m}║${w}dalam Al Quran dan termasuk         ${m}║${w}
${m}║${w}golongan surat Makkiyyah.           ${m}║${w}
${m}║${w}Surat ini disebut Al Faatihah       ${m}║${w}
${m}║${w}(Pembukaan), karena dengan          ${m}║${w}
${m}║${w}surat inilah dibuka dan             ${m}║${w}
${m}║${w}dimulainya Al Quran. Dinamakan      ${m}║${w}
${m}║${w}Ummul Quran (induk Al Quran)        ${m}║${w}
${m}║${w}atau Ummul Kitaab (induk Al Kitaab) ${m}║${w}
${m}║${w}karena dia merupakan induk dari     ${m}║${w}
${m}║${w}semua isi Al Quran, dan karena      ${m}║${w}
${m}║${w}itu diwajibkan membacanya pada      ${m}║${w}
${m}║${w}tiap-tiap sembahyang. Dinamakan     ${m}║${w}
${m}║${w}pula As Sab'ul matsaany             ${m}║${w}
${m}║${w}(tujuh yang berulang-ulang)         ${m}║${w}
${m}║${w}karena ayatnya tujuh dan            ${m}║${w}
${m}║${w}dibaca berulang-ulang dalam sholat  ${m}║${w}
${m}╚════════════════════════════════════╝
" 
rm s
}

surat2(){
curl -s "https://api.banghasan.com/quran/format/json/surat/2" >> s
printf "${b}╔══════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"           \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"             \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"  \033[34;1m║\033[39;1m"'}
printf "${b}╚══════════════════════╝"
printf "
${m}╔════════════════════════════════════╗
${m}║${w}keterangan: Surat Al Baqarah        ${m}║${w}
${m}║${w}(sapi betina)yang 286 ayat          ${m}║${w}
${m}║${w}itu turun di Madinah yang           ${m}║${w}
${m}║${w}sebahagian besar diturunkan         ${m}║${w}
${m}║${w}pada permulaan tahun Hijrah,        ${m}║${w}
${m}║${w}kecuali ayat 281 diturunkan         ${m}║${w}
${m}║${w}di Mina pada Hajji wadaa'           ${m}║${w}
${m}║${w}(hajji Nabi Muhammad s.a.w.         ${m}║${w}
${m}║${w}yang terakhir). Seluruh ayat        ${m}║${w}
${m}║${w}dari surat Al Baqarah termasuk      ${m}║${w}
${m}║${w}golongan Madaniyyah, merupakan      ${m}║${w}
${m}║${w}surat yang terpanjang di            ${m}║${w}
${m}║${w}antara surat-surat Al Quran         ${m}║${w}
${m}║${w}yang di dalamnya terdapat pula      ${m}║${w}
${m}║${w}ayat yang terpancang (ayat 282).    ${m}║${w}
${m}║${w}Surat ini dinamai Al Baqarah        ${m}║${w}
${m}║${w}karena di dalamnya disebutkan       ${m}║${w}
${m}║${w}kisah penyembelihan sapi betina     ${m}║${w}
${m}║${w}yang diperintahkan Allah kepada     ${m}║${w}
${m}║${w}Bani Israil (ayat 67 sampai         ${m}║${w}
${m}║${w}dengan 74), dimana dijelaskan       ${m}║${w}
${m}║${w}watak orang Yahudi pada umumnya.    ${m}║${w}
${m}║${w}Dinamai Fusthaatul-Quran            ${m}║${w}
${m}║${w}(puncak Al Quran) karena memuat     ${m}║${w}
${m}║${w}beberapa hukum yang tidak           ${m}║${w}
${m}║${w}disebutkan dalam surat yang         ${m}║${w}
${m}║${w}lain. Dinamai juga surat            ${m}║${w}
${m}║${w}alif-laam-miim karena surat ini     ${m}║${w}
${m}║${w}dimulai dengan Alif-laam-miim.      ${m}║${w}
${m}╚════════════════════════════════════╝
"
rm s
}

surat3(){
curl -s "https://api.banghasan.com/quran/format/json/surat/3" >> s
printf "${b}╔═══════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"            \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"  \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"              \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"\033[34;1m║\033[39;1m"'}
printf "${b}╚═══════════════════════╝"
printf "
${m}╔════════════════════════════════════╗
${m}║${w}keterangan: Surat Ali 'Imran        ${m}║${w}
${m}║${w}yang terdiri dari 200 ayat ini      ${m}║${w}
${m}║${w}adalah surat Madaniyyah.            ${m}║${w}
${m}║${w}Dinamakan Ali 'Imran karena         ${m}║${w}
${m}║${w}memuat kisah keluarga 'Imran        ${m}║${w}
${m}║${w}yang di dalam kisah itu disebutkan  ${m}║${w}
${m}║${w}kelahiran Nabi Isa a.s., persamaan  ${m}║${w}
${m}║${w}kejadiannya dengan Nabi Adam a. s., ${m}║${w}
${m}║${w}kenabian dan beberapa mukjizatnya,  ${m}║${w}
${m}║${w}serta disebut pula kelahiran Maryam ${m}║${w}
${m}║${w}puteri 'Imran, ibu dari Nabi Isa a.s${m}║${w}
${m}║${w}Surat Al Baqarah dan Ali 'Imran ini ${m}║${w}
${m}║${w}dinamakan Az Zahrawaani             ${m}║${w}
${m}║${w}(dua yang cemerlang), karena kedua  ${m}║${w}
${m}║${w}surat ini menyingkapkan hal-hal yang${m}║${w}
${m}║${w}disembunyikan oleh para Ahli Kitab, ${m}║${w}
${m}║${w}seperti kejadian dan kelahiran      ${m}║${w}
${m}║${w}Nabi Isa a.s., kedatangan           ${m}║${w}
${m}║${w}Nabi Muhammad s.a.w. dan sebagainya.${m}║${w}
${m}╚════════════════════════════════════╝
"
rm s
}

surat4(){
curl -s "https://api.banghasan.com/quran/format/json/surat/4" >> s
printf "${b}╔════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"         \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"           \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"    \033[34;1m║\033[39;1m"'}
printf "${b}╚════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat An Nisaa       ${m}║${w}
${m}║${w}yang terdiri dari 176 ayat itu,  ${m}║${w} 
${m}║${w}adalah surat Madaniyyah yang     ${m}║${w}
${m}║${w}terpanjang sesudah surat         ${m}║${w}
${m}║${w}Al Baqarah. Dinamakan An Nisaa'  ${m}║${w}
${m}║${w}karena dalam surat ini banyak    ${m}║${w}
${m}║${w}dibicarakan hal-hal yang         ${m}║${w}
${m}║${w}berhubungan dengan wanita serta  ${m}║${w}
${m}║${w}merupakan surat yang paling      ${m}║${w}
${m}║${w}membicarakan hal itu dibanding   ${m}║${w}
${m}║${w}dengan surat-surat yang lain.    ${m}║${w}
${m}║${w}Surat yang lain banyak juga      ${m}║${w}
${m}║${w}yang membicarakan tentang hal    ${m}║${w}
${m}║${w}wanita ialah surat Ath Thalaq.   ${m}║${w}
${m}║${w}Dalam hubungan ini biasa         ${m}║${w}
${m}║${w}disebut surat An Nisaa' dengan   ${m}║${w}
${m}║${w}sebutan: Surat An Nisaa'         ${m}║${w}
${m}║${w}Al Kubraa (surat An Nisaa'       ${m}║${w}
${m}║${w}yang besar), sedang  surat       ${m}║${w}
${m}║${w}Ath Thalaq disebut dengan        ${m}║${w}
${m}║${w}sebutan: Surat An Nisaa'         ${m}║${w}
${m}║${w}Ash Shughraa (surat An Nisaa'    ${m}║${w}
${m}║${w}yang kecil).                     ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat5(){
curl -s "https://api.banghasan.com/quran/format/json/surat/5" >> s
printf "${b}╔═════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"          \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"            \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"   \033[34;1m║\033[39;1m"'}
printf "${b}╚═════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Al Maa'idah    ${m}║${w}
${m}║${w}terdiri dari 120 ayat; termasuk  ${m}║${w}
${m}║${w}golongan surat Madaniyyah.       ${m}║${w}
${m}║${w}Sekalipun ada ayatnya yang       ${m}║${w}
${m}║${w}turun di Mekah, namun ayat ini   ${m}║${w}
${m}║${w}diturunkan sesudah Nabi Muhammad ${m}║${w}
${m}║${w}s.a.w. hijrah ke Medinah, yaitu  ${m}║${w}
${m}║${w}di waktu haji wadaa'. Surat ini  ${m}║${w}
${m}║${w}dinamakan Al Maa'idah (hidangan) ${m}║${w}
${m}║${w}karena memuat kisah pengikut-    ${m}║${w}
${m}║${w}pengikut setia Nabi Isa a.s.     ${m}║${w}
${m}║${w}meminta kepada Nabi Isa a.s. agar${m}║${w}
${m}║${w}Allah menurunkan untuk mereka    ${m}║${w} 
${m}║${w}Al Maa'idah (hidangan makanan)   ${m}║${w}
${m}║${w}dari langit (ayat 112). Dan      ${m}║${w}
${m}║${w}dinamakan Al Uqud (perjanjian),  ${m}║${w}
${m}║${w}karena kata itu terdapat pada    ${m}║${w}
${m}║${w}ayat pertama surat ini, dimana   ${m}║${w}
${m}║${w}Allah menyuruh agar hamba-       ${m}║${w}
${m}║${w}hamba-Nya memenuhi janji prasetia${m}║${w}
${m}║${w}terhadap Allah dan perjanjian-   ${m}║${w}
${m}║${w}perjanjian yang mereka buat      ${m}║${w}
${m}║${w}sesamanya. Dinamakan juga        ${m}║${w}
${m}║${w}Al Munqidz (yang menyelamatkan), ${m}║${w}
${m}║${w}karena akhir surat ini mengandung${m}║${w}
${m}║${w}kisah tentang Nabi Isa a.s.      ${m}║${w}
${m}║${w}penyelamat pengikut-pengikut     ${m}║${w} 
${m}║${w}setianya dari azab Allah.        ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat6(){
curl -s "https://api.banghasan.com/quran/format/json/surat/6" >> s
printf "${b}╔════════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"             \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"    \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"               \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"\033[34;1m║\033[39;1m"'}
printf "${b}╚════════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Al An'aam      ${m}║${w}
${m}║${w}(binatang ternak: unta, sapi,    ${m}║${w}
${m}║${w}biri-biri dan kambing)           ${m}║${w}
${m}║${w}yang terdiri atas 165 ayat,      ${m}║${w}
${m}║${w}termasuk golongan surat          ${m}║${w}
${m}║${w}Makkiyah, karena hampir          ${m}║${w}
${m}║${w}seluruh ayat-ayat-Nya            ${m}║${w}
${m}║${w}diturunkan di Mekah dekat        ${m}║${w}
${m}║${w}sebelum hijrah. Dinamakan        ${m}║${w}
${m}║${w}Al An'aam karena di dalamnya     ${m}║${w}
${m}║${w}disebut kata An'aam dalam        ${m}║${w}
${m}║${w}hubungan dengan adat-istiadat    ${m}║${w} 
${m}║${w}kaum musyrikin, yang menurut     ${m}║${w}
${m}║${w}mereka binatang-binatang         ${m}║${w}
${m}║${w}ternak itu dapat dipergunakan    ${m}║${w}
${m}║${w}untuk mendekatkan diri kepada    ${m}║${w}
${m}║${w}tuhan mereka. Juga dalam surat   ${m}║${w}
${m}║${w}ini disebutkan hukum-hukum       ${m}║${w}
${m}║${w}yang berkenaan dengan            ${m}║${w}
${m}║${w}binatang ternak itu.             ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat7(){
curl -s "https://api.banghasan.com/quran/format/json/surat/7" >> s
printf "${b}╔═════════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"              \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"     \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"                \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"\033[34;1m║\033[39;1m"'}
printf "${b}╚═════════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Al A'raaf      ${m}║${w}
${m}║${w}yang berjumlah 206 ayat termasuk ${m}║${w}
${m}║${w}golongan surat Makkiyah,         ${m}║${w}
${m}║${w}diturunkan sebelum turunnya surat${m}║${w}
${m}║${w}Al An'aam dan termasuk golongan  ${m}║${w}
${m}║${w}surat Assab 'uththiwaal          ${m}║${w}
${m}║${w}(tujuh surat yang panjang).      ${m}║${w}
${m}║${w}Dinamakan Al A'raaf karena       ${m}║${w}
${m}║${w}perkataan Al A'raaf terdapat     ${m}║${w}
${m}║${w}dalam ayat 46 yang mengemukakan  ${m}║${w}
${m}║${w}tentang keadaan orang-orang yang ${m}║${w}
${m}║${w}berada di atas Al A'raaf yaitu:  ${m}║${w}
${m}║${w}tempat yang tertinggi di batas   ${m}║${w}
${m}║${w}surga dan neraka.                ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat8(){
curl -s "https://api.banghasan.com/quran/format/json/surat/8" >> s
printf "${b}╔══════════════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"                   \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"         \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"                      \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3,$4"\033[34;1m║\033[39;1m"'} | sed '$d'
printf "${b}╚══════════════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Al Anfaal      ${m}║${w}
${m}║${w}terdiri atas 75 ayat dan         ${m}║${w}
${m}║${w}termasuk golongan surat-surat    ${m}║${w}
${m}║${w}Madaniyyah, karena seluruh       ${m}║${w}
${m}║${w}ayat-ayatnya diturunkan di       ${m}║${w}
${m}║${w}Madinah. Surat ini dinamakan     ${m}║${w}
${m}║${w}Al Anfaal yang berarti harta     ${m}║${w}
${m}║${w}rampasan perang berhubung        ${m}║${w}
${m}║${w}kata Al Anfaal terdapat pada     ${m}║${w}
${m}║${w}permulaan surat ini dan juga     ${m}║${w}
${m}║${w}persoalan yang menonjol dalam    ${m}║${w}
${m}║${w}surat ini ialah tentang harta    ${m}║${w}
${m}║${w}rampasan perang, hukum perang    ${m}║${w}
${m}║${w}dan hal-hal yang berhubungan     ${m}║${w}
${m}║${w}dengan peperangan pada umumnya.  ${m}║${w}
${m}║${w}Menurut riwayat Ibnu Abbas r.a.  ${m}║${w}
${m}║${w}surat ini diturunkan berkenaan   ${m}║${w}
${m}║${w}dengan perang Badar Kubra yang   ${m}║${w}
${m}║${w}terjadi pada tahun kedua hijrah. ${m}║${w}
${m}║${w}Peperangan ini sangat penting    ${m}║${w}
${m}║${w}artinya, karena dialah yang      ${m}║${w}
${m}║${w}menentukan jalan sejarah         ${m}║${w}
${m}║${w}Perkembangan Islam. Pada waktu   ${m}║${w}
${m}║${w}itu umat Islam dengan            ${m}║${w}
${m}║${w}berkekuatan kecil untuk pertama  ${m}║${w}
${m}║${w}kali dapat mengalahkan kaum      ${m}║${w}
${m}║${w}musyrikin yang berjumlah besar,  ${m}║${w}
${m}║${w}dan berperlengkapan yang cukup,  ${m}║${w} 
${m}║${w}dan mereka dalam peperangan ini  ${m}║${w}
${m}║${w}memperoleh harta rampasan perang ${m}║${w}
${m}║${w}yang tidak sedikit. Oleh sebab   ${m}║${w}
${m}║${w}itu timbullah masalah bagaimana  ${m}║${w}
${m}║${w}membagi harta-harta rampasan     ${m}║${w}
${m}║${w}perang itu, maka kemudian Allah  ${m}║${w}
${m}║${w}menurunkan ayat pertama          ${m}║${w}
${m}║${w}dari surat ini.                  ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat9(){
curl -s "https://api.banghasan.com/quran/format/json/surat/9" >> s
printf "${b}╔═════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"          \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3        "\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"            \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"\033[34;1m║\033[39;1m"'} | sed '$d'
printf "${b}╚═════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat At Taubah      ${m}║${w}
${m}║${w}terdiri atas 129 ayat termasuk   ${m}║${w}
${m}║${w}golongan surat-surat Madaniyyah. ${m}║${w}
${m}║${w}Surat ini dinamakan At Taubah    ${m}║${w}
${m}║${w}yang berarti pengampunan         ${m}║${w}
${m}║${w}berhubung kata At Taubah         ${m}║${w}
${m}║${w}berulang kali disebut dalam      ${m}║${w}
${m}║${w}surat ini. Dinamakan juga dengan ${m}║${w}
${m}║${w}Baraah yang berarti berlepas     ${m}║${w}
${m}║${w}diri yang di sini maksudnya      ${m}║${w}
${m}║${w}pernyataan pemutusan perhubungan,${m}║${w}
${m}║${w}disebabkan kebanyakan pokok      ${m}║${w}
${m}║${w}pembicaraannya tentang pernyataan${m}║${w}
${m}║${w}pemutusan perjanjian damai dengan${m}║${w} 
${m}║${w}kaum musyrikin. Di samping kedua ${m}║${w}
${m}║${w}nama yang masyhur itu ada lagi   ${m}║${w}
${m}║${w}beberapa nama yang lain yang     ${m}║${w}
${m}║${w}merupakan sifat dari surat ini.  ${m}║${w}
${m}║${w}Berlainan dengan surat-surat     ${m}║${w}
${m}║${w}yang lain, maka pada permulaan   ${m}║${w}
${m}║${w}surat ini tidak terdapat basmalah${m}║${w} 
${m}║${w}karena surat ini adalah          ${m}║${w}
${m}║${w}pernyataan erang dengan arti     ${m}║${w}
${m}║${w}bahwa segenap kaum muslimin      ${m}║${w}
${m}║${w}dikerahkan untuk memerangi       ${m}║${w}
${m}║${w}seluruh kaum musyrikin,          ${m}║${w}
${m}║${w}sedangkan basmalah bernafaskan   ${m}║${w}
${m}║${w}perdamaian dan cinta kasih Allah.${m}║${w} 
${m}║${w}Surat ini diturunkan sesudah Nabi${m}║${w} 
${m}║${w}Muhammad s.a.w. kembali dari     ${m}║${w}
${m}║${w}peperangan Tabuk yang terjadi    ${m}║${w}
${m}║${w}pada tahun 9 H. Pengumuman ini   ${m}║${w}
${m}║${w}disampaikan oleh Saidina 'Ali r.a${m}║${w} 
${m}║${w}pada musim haji tahun itu juga.  ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat10(){
curl -s "https://api.banghasan.com/quran/format/json/surat/10" >> s
printf "${b}╔═════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"     \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"        \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"  \033[34;1m║\033[39;1m"'}
printf "${b}╚═════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Yunus          ${m}║${w}
${m}║${w}terdiri atas 109 ayat, termasuk  ${m}║${w}
${m}║${w}golongan surat-surat Makkiyyah   ${m}║${w}
${m}║${w}kecuali ayat 40, 94, 95, yang    ${m}║${w}
${m}║${w}diturunkan pada masa             ${m}║${w}
${m}║${w}Nabi Muhmmad s.a.w. berada di    ${m}║${w}
${m}║${w}Madinah. Surat ini dinamai       ${m}║${w}
${m}║${w}surat Yunus karena dalam surat   ${m}║${w}
${m}║${w}ini terutama ditampilkan kisah   ${m}║${w}
${m}║${w}Nabi Yunus a.s. dan pengikut-    ${m}║${w}
${m}║${w}pengikutnya yang teguh imannya.  ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat11(){
curl -s "https://api.banghasan.com/quran/format/json/surat/11" >> s
printf "${b}╔════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"    \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"       \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"   \033[34;1m║\033[39;1m"'}
printf "${b}╚════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Huud           ${m}║${w}
${m}║${w}termasuk golongan surat-surat    ${m}║${w}
${m}║${w}Makkiyyah, terdiri dari 123      ${m}║${w}
${m}║${w}ayat diturunkan sesudah surat    ${m}║${w}
${m}║${w}Yunus. Surat ini dinamai surat   ${m}║${w}
${m}║${w}Huud karena ada hubungan dengan  ${m}║${w}
${m}║${w}terdapatnya kisah Nabi Huud a.s. ${m}║${w}
${m}║${w}dan kaumnya dalam surat ini      ${m}║${w}
${m}║${w}terdapat juga kisah-kisah Nabi   ${m}║${w}
${m}║${w}yang lain, seperti kisah         ${m}║${w}
${m}║${w}Nuh a.s., Shaleh a.s.,           ${m}║${w}
${m}║${w}Ibrahim a.s., Luth a.s.,         ${m}║${w}
${m}║${w}Syu'aib a.s. dan Musa a.s.       ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat12(){
curl -s "https://api.banghasan.com/quran/format/json/surat/12" >> s
printf "${b}╔═════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"     \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"        \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"  \033[34;1m║\033[39;1m"'}
printf "${b}╚═════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Yusuf          ${m}║${w}
${m}║${w}ini terdiri atas 111 ayat,       ${m}║${w}
${m}║${w}termasuk golongan surat-surat    ${m}║${w}
${m}║${w}Makkiyyah karena diturunkan      ${m}║${w}
${m}║${w}di Mekah sebelum hijrah.         ${m}║${w}
${m}║${w}Surat ini dinamakan surat Yusuf  ${m}║${w}
${m}║${w}adalah karena titik berat dari   ${m}║${w}
${m}║${w}isinya mengenai riwayat          ${m}║${w}
${m}║${w}Nabi Yusuf a.s.  Riwayat         ${m}║${w}
${m}║${w}tersebut salah satu di antara    ${m}║${w}
${m}║${w}cerita-cerita ghaib yang         ${m}║${w}
${m}║${w}diwahyukan kepada Nabi           ${m}║${w}
${m}║${w}Muhammad s.a.w. sebagai mukjizat ${m}║${w}
${m}║${w}bagi beliau, sedang beliau       ${m}║${w}
${m}║${w}sebelum diturunkan surat ini     ${m}║${w}
${m}║${w}tidak mengetahuinya.  Menurut    ${m}║${w}
${m}║${w}riwayat Al Baihaqi dalam kitab   ${m}║${w}
${m}║${w}Ad Dalail bahwa segolongan orang ${m}║${w}
${m}║${w}Yahudi masuk agama Islam sesudah ${m}║${w}
${m}║${w}mereka mendengar cerita          ${m}║${w}
${m}║${w}Yusuf a.s. ini, karena sesuai    ${m}║${w}
${m}║${w}dengan cerita-cerita yang mereka ${m}║${w}
${m}║${w}ketahui. Dari cerita Yusuf a.s.  ${m}║${w}
${m}║${w}ini, Nabi Muhammad s.a.w.        ${m}║${w}
${m}║${w}mengambil pelajaran-pelajaran    ${m}║${w}
${m}║${w}yang banyak dan merupakan        ${m}║${w}
${m}║${w}penghibur terhadap beliau dalam  ${m}║${w}
${m}║${w}menjalankan tugasnya.            ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat13(){
curl -s "https://api.banghasan.com/quran/format/json/surat/13" >> s
printf "${b}╔═════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"         \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3" \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"             \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"      \033[34;1m║\033[39;1m"'} | sed '$d'
printf "${b}╚═════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Ar Ra'd        ${m}║${w}
${m}║${w}ini terdiri atas 43 ayat         ${m}║${w}
${m}║${w}termasuk golongan surat-surat    ${m}║${w}
${m}║${w}Makkiyyah. Surat ini             ${m}║${w}
${m}║${w}dinamakan Ar Ra'd yang berarti   ${m}║${w}
${m}║${w}guruh karena dalam ayat          ${m}║${w}
${m}║${w}13 Allah berfirman yang          ${m}║${w}
${m}║${w}artinya Dan guruh itu            ${m}║${w}
${m}║${w}bertasbih sambil memuji-Nya,     ${m}║${w}
${m}║${w}menunjukkan sifat kesucian dan   ${m}║${w}
${m}║${w}kesempurnaan Allah s.w.t.  Dan   ${m}║${w}
${m}║${w}lagi sesuai dengan sifat         ${m}║${w}
${m}║${w}Al Quran yang mengandung         ${m}║${w}
${m}║${w}ancaman dan harapan, maka        ${m}║${w}
${m}║${w}demikian pulalah halnya bunyi    ${m}║${w}
${m}║${w}guruh itu menimbulkan kecemasan  ${m}║${w}
${m}║${w}dan harapan kepada manusia. Isi  ${m}║${w}
${m}║${w}yang terpenting dari surat ini   ${m}║${w}
${m}║${w}ialah bahwa bimbingan Allah      ${m}║${w}
${m}║${w}kepada makhluk-Nya bertalian     ${m}║${w}
${m}║${w}erat dengan hukum sebab dan      ${m}║${w}
${m}║${w}akibat. Bagi Allah s.w.t. tidak  ${m}║${w}
${m}║${w}ada pilih kasih dalam menetapkan ${m}║${w} 
${m}║${w}hukuman. Balasan atau hukuman    ${m}║${w}
${m}║${w}adalah akibat dan ketaatan atau  ${m}║${w}
${m}║${w}keingkaran terhadap hukum Allah. ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat14(){
curl -s "https://api.banghasan.com/quran/format/json/surat/14" >> s
printf "${b}╔═══════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"       \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"           \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"  \033[34;1m║\033[39;1m"'}
printf "${b}╚═══════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Ibrahim        ${m}║${w}
${m}║${w}ini terdiri atas 52 ayat,        ${m}║${w}
${m}║${w}termasuk golongan surat-surat    ${m}║${w}
${m}║${w}Makkiyyah karena diturunkan      ${m}║${w}
${m}║${w}di Mekah sebelum Hijrah.         ${m}║${w}
${m}║${w}Dinamakan Ibrahim, karena surat  ${m}║${w}
${m}║${w}ini mengandung doa               ${m}║${w}
${m}║${w}Nabi Ibrahim a.s. yaitu ayat 35  ${m}║${w}
${m}║${w}sampai dengan 41. Do'a ini       ${m}║${w}
${m}║${w}isinya antara lain: permohonan   ${m}║${w}
${m}║${w}agar keturunannya mendirikan     ${m}║${w}
${m}║${w}shalat, dijauhkan dari menyembah ${m}║${w}
${m}║${w}berhala-berhala dan agar Mekah   ${m}║${w}
${m}║${w}dan daerah sekitarnya menjadi    ${m}║${w}
${m}║${w}daerah yang aman dan makmur. Doa ${m}║${w}
${m}║${w}Nabi Ibrahim a.s. ini telah      ${m}║${w}
${m}║${w}diperkenankan oleh Allah s.w.t.  ${m}║${w}
${m}║${w}sebagaimana telah terbukti       ${m}║${w}
${m}║${w}keamanannya sejak dahulu sampai  ${m}║${w}
${m}║${w}sekarang. Do'a tersebut          ${m}║${w}
${m}║${w}dipanjatkan beliau ke hadirat    ${m}║${w}
${m}║${w}Allah s.w.t. sesudah selesai     ${m}║${w}
${m}║${w}membina Ka'bah bersama puteranya ${m}║${w}
${m}║${w}Ismail a.s., di dataran tanah    ${m}║${w}
${m}║${w}Mekah yang tandus.               ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat15(){
curl -s "https://api.banghasan.com/quran/format/json/surat/15" >> s
printf "${b}╔══════════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"              \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"       \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"                  \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3,$4"\033[34;1m║\033[39;1m"'}
printf "${b}╚══════════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat ini            ${m}║${w}
${m}║${w}terdiri atas 99 ayat, termasuk   ${m}║${w}
${m}║${w}golongan surat-surat Makkiyyah   ${m}║${w}
${m}║${w}karena diturunkan di Mekah       ${m}║${w}
${m}║${w}sebelum hijrah. Al Hijr  adalah  ${m}║${w}
${m}║${w}nama sebuah daerah  pegunungan   ${m}║${w}
${m}║${w}yang didiami zaman dahulu  oleh  ${m}║${w}
${m}║${w}kaum Tsamud terletak di pinggir  ${m}║${w}
${m}║${w}jalan antara Madinah dan         ${m}║${w}
${m}║${w}Syam (Syria). Nama surat ini     ${m}║${w}
${m}║${w}diambil dari nama daerah         ${m}║${w}
${m}║${w}pegunungan itu, berhubung nasib  ${m}║${w}
${m}║${w}penduduknya yaitu  kaum Tsamud   ${m}║${w} 
${m}║${w}diceritakan pada ayat  80 sampai ${m}║${w}
${m}║${w}dengan 84,  mereka  telah        ${m}║${w}
${m}║${w}dimusnahkan Allah s.w.t., karena ${m}║${w}
${m}║${w}mendustakan  Nabi  Shaleh  a.s.  ${m}║${w}
${m}║${w}dan berpaling dari ayat-ayat     ${m}║${w}
${m}║${w}Allah. Dalam  surat ini terdapa  ${m}║${w}
${m}║${w}juga kisah-kisah  kaum yang lain ${m}║${w}
${m}║${w}yang telah dibinasakan oleh Allah${m}║${w}
${m}║${w}seperti  kaum Luth  a.s. dan kaum${m}║${w}
${m}║${w}Syu'aib a.s. Dari ke semua       ${m}║${w}
${m}║${w}kisah-kisah  itu dapat  diambil  ${m}║${w}
${m}║${w}pelajaran bahwa orang-orang  yang${m}║${w}  
${m}║${w}menentang  ajaran  rasul-rasul   ${m}║${w} 
${m}║${w}akan  mengalami kehancuran.      ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat16(){
curl -s "https://api.banghasan.com/quran/format/json/surat/16" >> s
printf "${b}╔═══════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"       \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"          \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"    \033[34;1m║\033[39;1m"'} | sed '$d'
printf "${b}╚═══════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat ini            ${m}║${w}
${m}║${w}terdiri atas 128 ayat, termasuk  ${m}║${w}
${m}║${w}golongan surat-surat Makkiyyah.  ${m}║${w}
${m}║${w}Surat ini dinamakan An Nahl      ${m}║${w}
${m}║${w}yang berarti lebah karena di     ${m}║${w}
${m}║${w}dalamnya, terdapat firman        ${m}║${w}
${m}║${w}Allah s.w.t. ayat 68 yang        ${m}║${w} 
${m}║${w}artinya : 'Dan Tuhanmu           ${m}║${w}
${m}║${w}mewahyukan kepada lebah.'        ${m}║${w}
${m}║${w}Lebah adalah makhluk Allah yang  ${m}║${w}
${m}║${w}banyak memberi manfaat  dan      ${m}║${w}
${m}║${w}kenikmatan kepada manusia. Ada   ${m}║${w}
${m}║${w}persamaan antara madu yang       ${m}║${w}
${m}║${w}dihasilkan oleh lebah dengan     ${m}║${w}
${m}║${w}Al Quranul Karim. Madu berasal   ${m}║${w}
${m}║${w}dari bermacam-macam sari bunga   ${m}║${w}
${m}║${w}dan dia menjadi obat bagi        ${m}║${w}
${m}║${w}bermacam-macam penyakit manusia  ${m}║${w}
${m}║${w}(lihat ayat 69). Sedang          ${m}║${w}
${m}║${w}Al Quran mengandung inti sari    ${m}║${w}
${m}║${w}dari kitab-kitab yang telah      ${m}║${w}
${m}║${w}diturunkan kepada Nabi-nabi      ${m}║${w}
${m}║${w}zaman dahulu ditambah dengan     ${m}║${w} 
${m}║${w}ajaran-ajaran yang diperlukan    ${m}║${w}
${m}║${w}oleh semua bangsa sepanjang      ${m}║${w}
${m}║${w}masa untuk mencapai kebahagiaan  ${m}║${w}
${m}║${w}dunia dan akhirat. (Lihat surat  ${m}║${w}
${m}║${w}(10) Yunus ayat 57 dan surat     ${m}║${w}
${m}║${w}(17) Al Isra' ayat  82). Surat   ${m}║${w}
${m}║${w}ini dinamakan pula 'An Ni'am'    ${m}║${w}
${m}║${w}artinya nikmat-nikmat, karena    ${m}║${w}
${m}║${w}di dalamnya Allah menyebutkan    ${m}║${w}
${m}║${w}pelbagai macam nikmat untuk      ${m}║${w}
${m}║${w}hamba-hamba-Nya.                 ${m}║${w}
${m}╚═════════════════════════════════╝
"
rm s
}

surat17(){
curl -s "https://api.banghasan.com/quran/format/json/surat/17" >> s
printf "${b}╔══════════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"              \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"     \033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"                 \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"\033[34;1m║\033[39;1m"'} | sed '$d'
printf "${b}╚══════════════════════════╝"
printf "
${m}╔════════════════════════════════╗
${m}║${w}keterangan1: 1Surat ini         ${m}║${w}
${m}║${w}terdiri atas 111 ayat, termasuk ${m}║${w}
${m}║${w}golongan surat-surat Makkiyyah. ${m}║${w}
${m}║${w}Dinamakan dengan Al Israa' yang ${m}║${w}
${m}║${w}berarti memperjalankan di malam ${m}║${w}
${m}║${w}hari, berhubung peristiwa Israa'${m}║${w} 
${m}║${w}Nabi Muhammad s.a.w. di         ${m}║${w} 
${m}║${w}Masjidil Haram di Mekah ke      ${m}║${w}
${m}║${w}Masjidil Aqsha di Baitul Maqdis ${m}║${w}
${m}║${w}dicantumkan pada ayat pertama   ${m}║${w}
${m}║${w}dalam surat ini. Penuturan      ${m}║${w}
${m}║${w}cerita Israa' pada permulaan    ${m}║${w}
${m}║${w}surat ini, mengandung isyarat   ${m}║${w}
${m}║${w}bahwa Nabi Muhammad s.a.w.      ${m}║${w}
${m}║${w}beserta umatnya kemudian hari   ${m}║${w}
${m}║${w}akan mencapai martabat yang     ${m}║${w}
${m}║${w}tinggi dan akan menjadi umat    ${m}║${w}
${m}║${w}yang besar. Surat ini dinamakan ${m}║${w}
${m}║${w}pula dengan Bani Israil artinya ${m}║${w}
${m}║${w}keturunan Israil berhubung      ${m}║${w}
${m}║${w}dengan permulaan surat ini,     ${m}║${w}
${m}║${w}yakni pada ayat kedua sampai    ${m}║${w}
${m}║${w}dengan ayat kedelapan dan       ${m}║${w}
${m}║${w}kemudian dekat akhir surat      ${m}║${w} 
${m}║${w}yakni pada ayat 101 sampai      ${m}║${w}
${m}║${w}dengan ayat 104, Allah          ${m}║${w}
${m}║${w}menyebutkan tentang Bani Israil ${m}║${w}
${m}║${w}yang setelah menjadi bangsa     ${m}║${w}
${m}║${w}yang kuat lagi besar lalu       ${m}║${w}
${m}║${w}menjadi bangsa yang terhina     ${m}║${w}
${m}║${w}karena menyimpang dari ajaran   ${m}║${w}
${m}║${w}Allah s.w.t. Dihubungkannya     ${m}║${w}
${m}║${w}kisah Israa' dengan riwayat Bani${m}║${w} 
${m}║${w}Israil pada surat ini,          ${m}║${w}
${m}║${w}memberikan peringatan bahwa     ${m}║${w}
${m}║${w}umat Islam akan mengalami       ${m}║${w}
${m}║${w}keruntuhan, sebagaimana halnya  ${m}║${w}
${m}║${w}Bani Israil, apabila mereka     ${m}║${w}
${m}║${w}juga meninggalkan               ${m}║${w}
${m}║${w}ajaran-ajaran agamanya.         ${m}║${w}
${m}╚════════════════════════════════╝
"
rm s
}

surat18(){
curl -s "https://api.banghasan.com/quran/format/json/surat/18" >> s
printf "${b}╔════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print "\033[34;1m║\033[39;1m"$1,"ke: "$2"        \033[34;1m║\033[39;1m"'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1,"surat: "$2,$3"\033[34;1m║\033[39;1m"'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print "\033[34;1m║\033[39;1m"$1,$2"           \033[34;1m║\033[39;1m"'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print "\033[34;1m║\033[39;1m"$1"nya:",$2,$3"       \033[34;1m║\033[39;1m"'} | sed '$d'
printf "${b}╚════════════════════╝"
printf "
${m}╔════════════════════════════════╗
${m}║${w}keterangan: Surat  ini          ${m}║${w}
${m}║${w}terdiri atas 110 ayat,          ${m}║${w}
${m}║${w}termasuk  golongan              ${m}║${w}
${m}║${w}surat-surat Makkiyyah.          ${m}║${w}
${m}║${w}Dinamai Al-Kahfi artinya        ${m}║${w}
${m}║${w}Gua dan Ashhabul Kahfi          ${m}║${w}
${m}║${w}yang artinya Penghuni-          ${m}║${w}
${m}║${w}Penghuni Gua. Kedua nama        ${m}║${w}
${m}║${w}ini diambil dari cerita         ${m}║${w}
${m}║${w}yang terdapat dalam surat       ${m}║${w}
${m}║${w}ini pada ayat 9 sampai          ${m}║${w}
${m}║${w}dengan 26, tentang              ${m}║${w}
${m}║${w}beberapa orang pemuda           ${m}║${w}
${m}║${w}yang tidur dalam gua            ${m}║${w}
${m}║${w}bertahun-tahun lamanya.         ${m}║${w}
${m}║${w}Selain cerita tersebut,         ${m}║${w}
${m}║${w}terdapat pula beberapa          ${m}║${w}
${m}║${w}buah cerita dalam surat         ${m}║${w}
${m}║${w}ini, yang kesemuanya            ${m}║${w}
${m}║${w}mengandung i'tibar dan          ${m}║${w}
${m}║${w}pelajaran-pelajaran yang        ${m}║${w}
${m}║${w}amat berguna bagi               ${m}║${w}
${m}║${w}kehidupan manusia. Banyak       ${m}║${w}
${m}║${w}hadist-hadist Rasulullah        ${m}║${w}
${m}║${w}s.a.w. yang menyatakan          ${m}║${w}
${m}║${w}keutamaan membaca surat ini.    ${m}║${w}
${m}╚════════════════════════════════╝
"
rm s
}

surat19(){
curl -s "https://api.banghasan.com/quran/format/json/surat/19" >> s
printf "${b}╔═════════════════════════╗\033[39;1m\n"
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "${b}╚═════════════════════════╝"
printf "
${m}╔═════════════════════════════════╗
${m}║${w}keterangan: Surat Maryam        ${m}║${w}
${m}║${w}terdiri atas 98 ayat, termasuk  ${m}║${w}
${m}║${w}golongan surat-surat Makkiyyah, ${m}║${w}
${m}║${w}karena hampir seluruh ayatnya   ${m}║${w}
${m}║${w}diturunkan sebelum Nabi         ${m}║${w}
${m}║${w}Muhammad s.a.w. hijrah ke       ${m}║${w}
${m}║${w}Madinah, bahkan sebelum 
${m}║${w}sahabat-sahabat beliau hijrah 
${m}║${w}ke negeri Habsyi. Menurut 
${m}║${w}riwayat Ibnu Mas'ud, Ja'far 
${m}║${w}bin Abi Thalib membacakan 
${m}║${w}permulaan surat Maryam ini 
${m}║${w}kepada raja Najasyi dan 
${m}║${w}pengikut-pengikutnya di waktu 
${m}║${w}ia ikut hijrah bersama-sama 
${m}║${w}sahabat-sahabat yang lain ke 
${m}║${w}negeri Habsyi. Surat ini 
${m}║${w}dinamai Maryam, karena surat 
${m}║${w}ini mengandung kisah Maryam, 
${m}║${w}ibu Nabi Isa a.s. yang serba 
${m}║${w}ajaib, yaitu melahirkan 
${m}║${w}puteranya lsa a.s., sedang ia 
${m}║${w}sebelumnya belum pernah 
${m}║${w}dikawini atau dicampuri oleh 
${m}║${w}seorang laki-laki pun. 
${m}║${w}Kelahiran Isa a.s. tanpa bapa, 
${m}║${w}merupakan suatu bukti 
${m}║${w}kekuasaan Allah s.w.t. 
${m}║${w}Pengutaraan kisah Maryam 
${m}║${w}sebagai kejadian yang luar 
${m}║${w}biasa dan ajaib dalam surat 
${m}║${w}ini, diawali dengan kisah 
${m}║${w}kejadian yang luar biasa dan 
${m}║${w}ajaib pula, yaitu dikabulkannya 
${m}║${w}doa Zakaria a.s. oleh 
${m}║${w}Allah s.w.t., agar beliau 
${m}║${w}dianugerahi seorang putera 
${m}║${w}sebagai pewaris dan pelanjut 
${m}║${w}cita-cita dan kepercayaan 
${m}║${w}beliau, sedang usia beliau 
${m}║${w}sudah sangat tua dan isteri 
${m}║${w}beliau seorang yang mandul yang 
${m}║${w}menurut ukuran ilmu biologi 
${m}║${w}tidak mungkin akan terjadi.
"
rm s
}

surat20(){
curl -s "https://api.banghasan.com/quran/format/json/surat/20" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Thaahaa 
terdiri atas 135 ayat, diturunkan sesudah diturunkannya surat Maryam, termasuk golongan surat-surat Makkiyyah. Surat ini dinamai Thaahaa, diambil dari perkataan yang berasal dan ayat pertama surat ini. Sebagaimana yang lazim terdapat pada surat-surat yang memakai huruf-huruf abjad pada permulaannya, di mana huruf tersebut seakan-akan merupakan pemberitahuan Allah kepada orang-orang yang membacanya, bahwa sesudah huruf itu akan dikemukakan hal-hal yang  sangat penting diketahui, maka demikian pula halnya dengan ayat-ayat yang terdapat sesudah huruf thaahaa dalam surat ini. Allah menerangkan bahwa Al Quran merupakan peringatan bagi manusia, wahyu dari Allah, Pencipta semesta alam. Kemudian Allah menerangkan kisah beberapa orang nabi; akibat-akibat yang telah ada akan dialami oleh orang-orang yang percaya kepada Allah dan orang-orang yang mengingkari-Nya, baik di dunia maupun di akhirat. Selain hal-hal tersebut di atas, maka surat ini mengandung pokok-pokok isi sebagai berikut:
"
rm s
}

surat21(){
curl -s "https://api.banghasan.com/quran/format/json/surat/21" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Anbiyaa
yang terdiri atas 112 ayat, termasuk golongan surat Makkiyyah. Dinamai surat ini dengan al anbiyaa'(nabi-nabi), karena surat ini mengutarakan kisah beberapa orang nabi. Permulaan surat Al Anbiyaa' menegaskan bahwa manusia lalai dalam menghadapi hari berhisab, kemudian berhubung adanya pengingkaran kaum musyrik Mekah terhadap wahyu yang dibawa Nabi Muhammad s.a.w. maka ditegaskan Allah, kendatipun nabi-nabi itu manusia biasa, akan tetapi masing-masing mereka adalah manusia yang membawa wahyu yang pokok ajarannya adalah tauhid, dan keharusan manusia menyembah Allah Tuhan Penciptanya. Orang yang tidak mau mengakui kekuasaan Allah dan mengingkari ajaran yang dibawa oleh nabi-nabi itu, akan diazab Allah didunia dan di akhirat nanti. Kemudian dikemukakan kisah beberapa orang nabi dengan umatnya. Akhirnya surat itu ditutup dengan seruan agar kaum musyrik Mekah percaya kepada ajaran yang dibawa Muhammad s.a.w supaya tidak mengalami apa yang telah dialami oleh umat-umat yang dahulu.
"
rm s
}

surat22(){
curl -s "https://api.banghasan.com/quran/format/json/surat/22" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Hajj, 
termasuk golongan surat-surat Madaniyyah, terdiri atas 78 ayat, sedang menurut pendapat sebahagian ahli tafsir termasuk golongan surat-surat Makkiyah. Sebab perbedaan ini ialah karena sebahagian ayat-ayat surat ini ada yang diturunkan di Mekah dan sebahagian lagi diturunkan di Madinah. Dinamai surat ini Al Hajj, karena surat ini mengemukakan hal-hal yang berhubungan dengan ibadat haji, seperti ihram, thawaf, sa'i, wuquf di Arafah, mencukur rambut, syi'ar-syi'ar Allah, faedah-faedah dan hikmah-hikmah disyari'atkannya haji. Ditegaskan pula bahwa ibadat haji itu telah disyari'atkan di masa Nabi Ibrahim a.s., dan Ka'bah didirikan oleh Nabi Ibrahim a.s. bersama puteranya Ismail a.s.Menurut Al Ghaznawi, surat Al Hajj termasuk di antara surat- surat yang ajaib, diturunkan di malam dan di siang hari, dalam musafir dan dalam keadaan tidak musafir, ada ayat-ayat yang diturunkan di Mekah dan ada pula yang diturunkan di Madinah, isinya ada yang berhubungan dengan peperangan dan ada pula yang berhubungan dengan perdamaian, ada ayat-ayatnya yang muhkam dan ada pula yang mutasyabihaat.
"
rm s
}

surat23(){
curl -s "https://api.banghasan.com/quran/format/json/surat/23" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Al Mu'minuun 
terdiri atas 118 ayat, termasuk golongan surat-surat Makkiyyah. Dinamai Al Mu'minuun, karena permulaan ayat ini manerangkan bagaimana seharusnya sifat-sifat orang mukmin yang menyebabkan keberuntungan mereka di akhirat dan ketenteraman jiwa mereka di dunia. Demikian tingginya sifat-sifat itu, hingga ia telah menjadi akhlak bagi Nabi Muhammad s.a.w.
"
rm s
}

surat24(){
curl -s "https://api.banghasan.com/quran/format/json/surat/24" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat An Nuur 
terdiri atas 64 ayat, dan termasuk golongan surat-surat Madaniyah. Dinamai An Nuur yang berarti Cahaya, diambil dari kata An Nuur yang terdapat pada ayat ke 35. Dalam ayat ini, Allah s.w.t. menjelaskan tentang Nuur Ilahi, yakni Al Quran yang mengandung petunjuk-petunjuk. Petunjuk-petunjuk Allah itu, merupakan cahaya yang terang benderang menerangi alam semesta. Surat ini sebagian besar isinya memuat petunjuk- petunjuk Allah yang berhubungan dengan soal kemasyarakatan dan rumah tangga.
"
rm s
}

surat25(){
curl -s "https://api.banghasan.com/quran/format/json/surat/25" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 77 ayat, termasuk golongan surat-surat Makkiyah. Dinamai Al Furqaan yang artinya pembeda, diambil dari kata Al Furqaan yang terdapat pada ayat pertama surat ini. Yang dimaksud dengan Al Furqaan dalam ayat ini ialah Al Quran. Al Quran dinamakan Al Furqaan karena dia membedakan antara yang haq dengan yang batil. MAka pada surat ini pun terdapat ayat-ayat yang membedakan antara kebenaran ke-esaan Allah s.w.t. dengan kebatilan kepercayaan syirik.
"
rm s
}

surat26(){
curl -s "https://api.banghasan.com/quran/format/json/surat/26" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri dari 227 ayat termasuk golongan surat-surat Makkiyyah. Dinamakan Asy Syu'araa' (kata jamak dari Asy Syaa'ir yang berarti penyair) diambil dari kata Asy Syuaraa' yang terdapat pada ayat 224, yaitu pada bagian terakhir surat ini, di kala Allah s.w.t. secara khusus menyebutkan kedudukan penyair- penyair. Para penyair-penyair itu mempunyai sifat-sifat yang jauh berbeda dengan para rasul-rasul; mereka diikuti oleh orang-orang yang sesat dan mereka suka memutar balikkan lidah dan mereka tidak mempunyai pendirian, perbuatan mereka tidak sesuai dengan tidak mempunyai pendirian, perbuatan mereka tidak sesuai dengan apa yang mereka ucapkan. Sifat-sifat yang demikian tidaklah sekali-kali terdapat pada rasul-rasul. Oleh karena demikian tidak patut bila Nabi Muhammad s.a.w. dituduh sebagai penyair, dan Al Quran dituduh sebagai syair, Al Quran adalah wahyu Allah, bukan buatan manusia.
"
rm s
}

surat27(){
curl -s "https://api.banghasan.com/quran/format/json/surat/27" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat An Naml 
terdiri atas 98 ayat, termasuk golongan surat- surat Makkiyyah dan diturunkan sesudah surat Asy Syu'araa'. Dinamai dengan An Naml, karena pada ayat 18 dan 19 terdapat perkataan An Naml (semut), di mana raja semut mengatakan kepada anak buahnya agar masuk sarangnya masing-masing, supaya jangan terpijak oleh Nabi Sulaiman a.s. dan tentaranya yang akan lalu di tempat itu. Mendengar perintah raja semut kepada anak buahnya itu, Nabi Sulaiman tersenyum dan ta'jub atas keteraturan kerajaan semut itu dan beliau mengucapkan syukur kepada Tuhan Yang Maba Kuasa yang telah melimpahkan nikmat kepadanya, berupa kerajaan, kekayaan, memahami ucapan-ucapan binatang, mempunyai tentara yang terdiri atas jin, manusia, burung dan sebagainya. Nabi Sulaiman a.s. yang telah diberi Allah nikmat yang besar itu tidak merasa takabur dan sombong dan sebagai seorang hamba Allah mohon agar Allah memasukkannya ke dalam golongan orang-orang yang saleh. Allah s.w.t. menyebut binatang semut dalam surat ini agar manusia mengambil pelajaran dari kehidupan semut itu. Semut adalah binatang yang hidup berkelompok di dalam tanah, membuat liang dan ruang yang bertingkat-tingkat sebagai rumah dan gudang tempat menyimpan makanan musim dingin. Kerapian dan kedisiplinan yang terdapat dalam kerajaan semut ini, dinyatakan Allah dalam ayat ini dengan bagaimana rakyat semut mencari perlindungan segera agar jangan terpijak oleh Nabi Sulaiman a.s dan tentaranya, setelah menerima peringatan dari rajanya. Secara tidak langsung Allah mengingatkan juga kepada manusia agar dalam berusaha untuk mencukupkan kebutuhan sehari-hari, mementingkan pula kemaslahatan bersama dan sebagainya, rakyat semut mempunyai organisasi dan kerja sama yang baik pula. Dengan mengisahkan kisah Nabi Sulaiman a.s. dalam surat ini Allah mengisyaratkan hari depan dan kebesaran Nabi Muhammad s.a.w. Nabi Sulaiman a.s. sebagai seorang nabi, rasul dan raja yang dianugerahi kekayaan yang melimpah ruah, begitu pula Nabi Muhammad s.a.w. sebagai seorang nabi, rasul dan seoramg kepala negara yang ummi' dan miskin akan berhasil membawa dan memimpin umatnya ke jalan Allah.
"
rm s
}

surat28(){
curl -s "https://api.banghasan.com/quran/format/json/surat/28" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat Al Qashash 
terdiri atas 88 ayat termasuk golongan surat-surat Makkiyyah. Dinamai dengan Al Qashash, karena pada ayat 25 surat ini terdapat kata Al Qashash yang berarti cerita. Ayat ini menerangkan bahwa setelah Nabi Musa a.s. bertemu dengan Nabi Syua'ib a.s. ia menceritakan cerita yang berhubungan  dengan dirinya sendiri, yakni pengalamannya dengan Fir'aun, sampai waktu ia diburu oleh Fir'aun karena membunuh seseorang dari bangsa Qibthi tanpa disengaja, Syua'ib a.s. menjawab bahwa Musa a.s. telah selamat dari pengejaran  orang-orang zalim. Turunnya ayat 25 surat ini amat besar artinya bagi Nabi Muhammad s.a.w. dan bagi sahabat-sahabat yang melakukan hijrah ke Madinah, yang menambah keyakinan mereka, bahwa akhirnya orang-orang Islamlah yang menang, sebab ayat ini menunjukkan bahwa barangsiapa yang berhijrah dari tempat musuh untuk mempertahankan keimanan, pasti akan berhasil dalam perjuangannya menghadapi musuh-musuh agama. Kepastian kemenangan bagi kaum muslimin itu, ditegaskan pada bagian akhir surat ini yang mengandung bahwa setelah hijrah ke Madinah kaum muslimin akan kembali ke Mekah sebagai pemenang dan penegak agama Allah. Surat Al Qashash ini adalah surat yang paling lengkap memuat cerita Nabi Musa a.s. sehingga menurut suatu riwayat, surat ini dinamai juga dengan surat Musa.
"
rm s
}

surat29(){
curl -s "https://api.banghasan.com/quran/format/json/surat/29" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat Al 'Ankabuut 
terdiri atas 69 ayat, termasuk golongan surat-surrat Makkiyah. Dinamai Al 'Ankabuut berhubung terdapatnya perkataan Al 'Ankabuut yang berarti laba-laba pada ayat 41 surat ini, dimana Allah mengumpamakan penyembah-penyembah berhala-berhala itu, dengan laba-laba yang percaya kepada kekuatan rumahnya sebagai tempat ia berlindung dan tempat ia menjerat mangsanya, padahal kalau dihembus angin atau ditimpa oleh suatu barang yang kecil saja, rumah itu akan hancur. Begitu pula halnya dengan kaum musyrikin yang percaya kepada kekuatan sembahan-sembahan mereka sebagai tempat berlindung dan tempat meminta sesuatu yang mereka ingini, padahal sembahan-sembahan mereka itu tidak mampu sedikit juga menolong mereka dari azab Allah waktu di dunia, seperti yang terjadi pada kaum Nuh, kaum Ibrahim, kaum Luth, kaum Syu'aib, kaum Saleh, dan lain-lain. Apalagi menghadapi azab Allah di akhirat nanti, sembahan-sembahan mereka itu lebih tidak mampu menghindarkan dan melindungi mereka.
"
rm s
}

surat30(){
curl -s "https://api.banghasan.com/quran/format/json/surat/30" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Ar Ruum 
terdiri atas 60 ayat, termasuk golongan surat-surat Makkiyah diturunkan sesudah ayat Al Insyiqaq. Dinamakan Ar Ruum karena pada permulaan surat ini, yaitu ayat 2, 3 dan 4 terdapat pemberitaan bangsa Rumawi yang pada mulanya dikalahkan oleh bangsa Persia, tetapi setelah beberapa tahun kemudian kerajaan Ruum dapat menuntut balas dan mengalahkan kerajaan Persia kembali. Ini adalah suatu mukjizat Al Quran, yaitu memberitakan hal-hal yang akan terjadi di masa yang akan datang. Dan juga suatu isyarat bahwa kaum muslimin yang demikian lemahnya di waktu itu akan menang dan dapat menghancurkan kaum musyrikin. Isyarat ini terbukti pertama kali pada perang Badar.
"
rm s
}

surat31(){
curl -s "https://api.banghasan.com/quran/format/json/surat/31" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat  Luqman  
terdiri   dari   34   ayat,   termasuk   golongan   surat-surat Makkiyyah, diturunkan sesudah surat Ash Shaffaat. Dinamai Luqman karena pada  ayat  12   disebutkan   bahwa  Luqman  telah diberi   oleh   Allah   nikmat   dan   ilmu   pengetahuan,  oleh sebab itu dia bersyukur kepadaNya atas nikmat yang  diberikan  itu.   Dan   pada   ayat   13 sampai 19 terdapat nasihat-nasihat Luqman kepada anaknya.Ini adalah sebagai  isyarat   daripada   Allah   supaya   setiap   ibu   bapak melaksanakan  pula terhadap anak-anak mereka sebagai yang telah dilakukan oleh Luqman.
"
rm s
}

surat32(){
curl -s "https://api.banghasan.com/quran/format/json/surat/32" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat As Sajdah 
terdiri atas 30 ayat termasuk golongan surat Makkiyah diturunkan sesudah surat Al Mu'minuun. Dinamakan As Sajdah berhubung pada surat ini terdapat ayat sajdah, yaitu ayat yang kelima belas.
"
rm s
}

surat33(){
curl -s "https://api.banghasan.com/quran/format/json/surat/33" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'} | sed '$d'
printf "
keterangan: Surat Al Ahzab 
terdiri atas 73 ayat, termasuk golongan surat-surat Madaniyah, diturunkan sesudah surat Ali'Imran. Dinamai Al Ahzab yang berarti golongan-golongan yang bersekutu karena dalam surat ini terdapat beberapa ayat, yaitu ayat 9 sampai dengan ayat 27 yang berhubungan dengan peperangan Al Ahzab, yaitu peperangan yang dilancarkan oleh orang-orang Yahudi, kaum munafik dan orang-orang musyrik terhadap orang-orang mukmin di Medinah. Mereka telah mengepung rapat orang- orang mukmin sehingga sebahagian dari mereka telah berputus asa dan menyangka bahwa mereka akan dihancurkan oleh musuh-musuh mereka itu. Ini adalah suatu ujian yang berat dari Allah untuk menguji sampai dimana teguhnya keimanan mereka. Akhirnya Allah mengirimkan bantuan berupa tentara yang tidak kelihatan dan angin topan, sehingga musuh-musuh itu menjadi kacau balau dan melarikan diri.
"
rm s
}

surat35(){
curl -s "https://api.banghasan.com/quran/format/json/surat/35" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Faathir 
terdiri atas 45 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Furqaan dan merupakan surat akhir dari urutan surat-surat dalam Al Quran yang dimulai dengan Alhamdulillah. Dinamakan Faathir (pencipta) ada hubungannya dengan perkataan Faathir yang terdapat pada ayat pertama pada surat ini. Pada ayat tersebut diterangkan bahwa Allah adalah Pencipta langit dan bumi, Pencipta malaikat-malaikat, Pencipta semesta alam yang semuanya itu adalah sebagai bukti atas kekuasaan dan kebesaran-Nya. Surat ini dinamai juga dengan surat Malaikat karena pada ayat pertama disebutkan bahwa Allah telah menjadikan malaikat-malaikat sebagai utusan-Nya  yang mempunyai beberapa sayap.
"
rm s
}

surat36(){
curl -s "https://api.banghasan.com/quran/format/json/surat/36" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat Yaasiin
terdiri atas 83 ayat, termasuk golongan surat-surat Makkiyyah,  diturunkan sesudah surat Jin. Dinamai Yaasiin karena dimulai dengan huruf Yaasiin. Sebagaimana halnya arti huruf-huruf abjad yang terletak pada permulaan beberapa surat Al Quran, maka demikian pula arti Yaasiin yang terdapat pada ayat permulaan surat ini, yaitu Allah mengisyaratkan bahwa sesudah huruf tersebut akan dikemukakan hal-hal yang penting antara lain: Allah bersumpah dengan Al Quran bahwa Muhammad s.a.w. benar-benar seorang rasul yang diutus-Nya kepada kaum yang belum pernah diutus kepada mereka rasul-rasul.
"
rm s
}

surat37(){
curl -s "https://api.banghasan.com/quran/format/json/surat/37" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Ash Shaaffaat 
terdiri atas 182 ayat termasuk golongan surat Makkiyyah diturunkan sesudah surat Al An'aam. Dinamai dengan Ash Shaaffaat (yang bershaf-shaf) ada hubungannya dengan perkataan Ash Shaaffaat yang terletak pada ayat permulaan surat ini yang mengemukakan bagaimana para malaikat yang berbaris di hadapan Tuhannya yang bersih jiwanya, tidak dapat digoda oleh syaitan. Hal ini hendaklah menjadi i'tibar bagi manusia dalam menghambakan dirinya kepada Allah.
"
rm s
}

surat38(){
curl -s "https://api.banghasan.com/quran/format/json/surat/38" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Shaad  
terdiri atas  88 ayat  termasuk golongan  surat Makkiyyah, diturunkan sesudah surat Al Qamar. Dinamai  dengan  Shaad  karena surat  ini  dimulai  dengan Shaad. Dalam surat  ini Allah  bersumpah dengan  Al Quran,   untuk menunjukkan bahwa Al Quran itu suatu  kitab yang  agung dan bahwa siapa saja yang  mengikutinya  akan mendapat  kebahagiaan  dunia  dan akhirat dan untuk menunjukkan bahwa Al Quran ini adalah mukjizat Nabi Muhammad s.a.w. yang  menyatakan kebenarannya dan ketinggian akhlaknya.
"
rm s
}

surat39(){
curl -s "https://api.banghasan.com/quran/format/json/surat/39" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Az Zumar 
terdiri ataz 75 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Saba'. Dinamakan Az Zumar (Rombongan-rombongan) karena perkataan Az Zumar yang terdapat pada ayat 71 dan 73 ini. Dalam ayat-ayat tersebut diterangkan keadaan manusia di hari kiamat setelah mereka dihisab, di waktu itu mereka terbagi atas dua rombongan; satu rombongan dibawa ke neraka dan satu rombongan lagi dibawa ke syurga. Masing- masing rombongan memperoleh balasan dari apa yang mereka kerjakan di dunia dahulu. Surat ini dinamakan juga Al Ghuraf (kamar-kamar) berhubung perkataan ghuraf yang terdapat pada ayat 20, dimana diterangkan keadaan kamar-kamar dalam syurga yang diperoleh orang-orang yang bertakwa.
"
rm s
}

surat40(){
curl -s "https://api.banghasan.com/quran/format/json/surat/40" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Al Mu'min 
terdiri atas 85 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Az Zumar. Dinamai Al Mu'min (Orang yang beriman), berhubung dengan perkataan mukmin yang terdapat pada ayat 28 surat ini. Pada ayat 28 diterangkan bahwa salah seorang dari kaum Fir'aun telah beriman kepada Nabi Musa a.s. dengan menyembunyikan imannya kepada kaumnya, setelah mendengar keterangan dan melihat mukjizat yang dikemukakan oleh Nabi Musa a.s. Hati kecil orang ini mencela Fir'aun dan kaumnya yang tidak mau beriman kepada Nabi Musa a.s., sekalipun telah dikemukakan keterangan dan mukjizat yang diminta mereka.Dinamakan pula Ghafir (yang mengampuni), karena ada hubungannya dengan kalimat Ghafir yang terdapat pada ayat 3 surat ini. Ayat ini mengingatkan bahwa Maha Pengampun dan Maha Penerima Taubat adalah sebagian dari sifat-sifat Allah, karena itu hamba-hamba Allah tidak usah khawatir terhadap  perbuatan-perbuatan dosa yang telah terlanjur mereka lakukan, semuanya itu akan diampuni Allah asal benar-benar memohon ampun dan bertaubat kepada-Nya dan berjanji tidak akan mengerjakan  perbuatan-perbuatan dosa itu lagi. Dan surat ini dinamai Dzit Thaul (Yang Mempunyai Kurnia) karena perkataan tersebut terdapat pada ayat 3.
"
rm s
}

surat41(){
curl -s "https://api.banghasan.com/quran/format/json/surat/41" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'} | sed '$d'
printf "
keterangan: Surat Fushshilat 
terdiri atas 54 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Mu'min. Dinamai Fushshilat (yang dijelaskan) karena ada hubungannya dengan perkataan Fushshilat yang terdapat pada permulaan surat ini yang berarti yang dijelaskan. Maksudnya ayat-ayatnya diperinci dengan jelas tentang hukum-hukum, keimanan, janji dan ancaman, budi pekerti, kisah, dan sebagainya. Dinamai juga dengan Haa Miim dan As Sajdah karena surat ini dimulai dengan Haa Miim dan dalam surat ini terdapat ayat Sajdah.
"
rm s
}

surat42(){
curl -s "https://api.banghasan.com/quran/format/json/surat/42" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Asy Syuura 
terdiri atas 53 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Fushshilat. Dinamai dengan Asy Syuura (musyawarat) diambil dari perkataan Syuura yang terdapat pada ayat 38 surat ini. Dalam ayat tersebut diletakkan salah satu dari dasar-dasar pemerintahan Islam ialah musyawarat. Dinamai juga Haa Miim 'Ain Siin Qaaf karena surat ini dimulai dengan huruf-huruf hijaiyah itu.
"
rm s
}

surat43(){
curl -s "https://api.banghasan.com/quran/format/json/surat/43" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat Az Zukhruf 
terdiri atas 89 ayat, termasuk golongan  surat-surat Makkiyyah, diturunkan sesudah surat Asy Syuura. Dinamai Az Zukhruf (Perhiasan) diambil dari perkataan Az Zukhruf yang terdapat pada ayat 35 surat ini.  Orang-orang musyrik mengukur tinggi rendahnya derajat seseorang tergantung kepada perhiasan dan harta benda yang ia punyai, karena Muhammad s.a.w. adalah seorang anak yatim lagi miskin, ia tidak pantas diangkat Allah sebagai seorang rasul dan nabi.  Pangkat rasul dan nabi harus diberikan kepada orang yang kaya.  Ayat ini menegaskan bahwa harta tidak dapat dijadikan dasar untuk mengukur tinggi rendahnya derajat seseorang, karena harta itu merupakan hiasan kehidupan duniawi, bukan berarti kesenangan akhirat.
"
rm s
}

surat44(){
curl -s "https://api.banghasan.com/quran/format/json/surat/44" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Ad Dukhaan 
terdiri atas 59 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah Az Zukhruf. Dinamai Ad Dukhaan (kabut), diambil dari perkataan Dukhaan yang terdapat pada ayat 10 surat ini.Menurut riwayat Bukhari secara ringkas dapat diterangkan sebagai berikut: Orang-orang kafir Mekah dalam menghalang-halangi agama Islam dan menyakiti serta mendurhakai Nabi Muhammad s.a.w. sudah melewati batas, karena itu Nabi mendoa kepada Allah agar diturunkan azab sebagaimana yang telah diturunkan kepada orang-orang yang durhaka kepada Nabi Yusuf yaitu musim kemarau yang panjang.  Do'a Nabi itu dikabulkan Allah sampai orang-orang kafir memakan tulang dan bangkai, karena kelaparan.  Mereka selalu menengadah ke langit mengharap pertolongan Allah.  Tetapi tidak satupun yang mereka lihat kecuali kabut yang menutupi pandangan mereka.Akhirnya mereka datang kepada Nabi agar Nabi memohon kepada Allah supaya hujan diturunkan.  Setelah Allah mengabulkan doa Nabi, dan hujan di turunkan, mereka kembali kafir seperti semula; karena itu Allah menyatakan bahwa nanti mereka akan diazab dengan azab yang pedih.
"
rm s
}

surat45(){
curl -s "https://api.banghasan.com/quran/format/json/surat/45" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Jaatsiyah 
terdiri atas 37 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Ad Dukhaan. Dinamai dengan Al Jaatsiyah (yang berlutut) diambil dari perkataan Jaatsiyah yang terdapat pada ayat 28 surat ini. Ayat tersebut menerangkan tentang keadaan manusia pada hari kiamat, yaitu semua manusia dikumpulkan ke hadapan mahkamah Allah Yang Maha Tinggi yang memberikan keputusan terhadap perbuatan yang telah mereka lakukan di dunia. Pada hari itu semua manusia berlutut di hadapan Allah. Dinamai juga dengan Asy Syari'ah diambil dari perkataan Syari'ah (Syari'at) yang terdapat pada ayat 18 surat ini.
"
rm s
}

surat46(){
curl -s "https://api.banghasan.com/quran/format/json/surat/46" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Ahqaaf 
terdiri dari 35 ayat termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Jaatsiyah. Dinamai Al Ahqaaf (bukit-bukit pasir) dari perkataan Al Ahqaaf yang terdapat pada ayat 21 surat ini.Dalam ayat tersebut dan ayat-ayat sesudahnya diterangkan bahwa Nabi Hud a.s. telah menyampaikan risalahnya kepada kaumnya di Al Ahqaaf yang sekarang dikenal dengan Ar Rab'ul Khaali, tetapi kaumnya tetap ingkar sekalipun mereka telah diberi peringatan pula oleh rasul-rasul yang sebelumnya.  Akhirnya Allah menghancurkan mereka dengan tiupan angin kencang.  Hal ini adalah sebagai isyarat dari Allah kepada kaum musyrikin Quraisy bahwa mereka akan dihancurkan bila mereka tidak mengindahkan seruan Rasul.
"
rm s
}

surat47(){
curl -s "https://api.banghasan.com/quran/format/json/surat/47" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Muhammad 
terdiri atas 38 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Hadiid. Nama Muhammad sebagai nama surat ini diambil dari perkataan Muhammad yang terdapat pada ayat 2 surat ini. Pada ayat 1, 2, dan 3 surat ini, Allah membandingkan antara hasil yang diperoleh oleh orang-orang yang tidak percaya kepada apa yang diturunkan kepada Nabi Muhammad s.a.w dan hasil yang diperoleh oleh orang-orang yang tidak percaya kepadanya. Orang-orang yang percaya kepada apa yang dibawa oleh Muhammad s.a.w merekalah orang-orang yang beriman dan mengikuti yang hak, diterima Allah semua amalnya, diampuni segala kesalahannya. Adapun orang-orang yang tidak percaya kepada Muhammad s.a.w adalah orang-orang yang mengikuti kebatilan, amalnya tidak diterima, dosa mereka tidak diampuni, kepada mereka dijanjikan azab di dunia dan di akhirat.Dinamai juga dengan Al Qital (peperangan), karena sebahagian besar surat ini mengutarakan tentang peperangan dan pokok-pokok hukumnya, serta bagaimana seharusnya sikap orang-orang mukmin terhadap orang-orang kafir.
"
rm s
}

surat48(){
curl -s "https://api.banghasan.com/quran/format/json/surat/48" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Fath 
terdiri atas 29 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Jum'ah. Dinamakan Al Fath (kemenangan) diambil dari perkataan Fat-han yang terdapat pada ayat pertama surat ini. Sebagian besar dari ayat-ayat surat ini menerangkan hal-hal yang berhubungan dengan kemenangan yang dicapai Nabi Muhammad s.a.w. dalam peperangan-peperangannya. Nabi Muhammad s.a.w. sangat gembira dengan turunnya ayat pertama surat ini. Kegembiraan ini dinyatakan dalam sabda beliau yang diriwayatkan Bukhari; Sesungguhnya telah diturunkan kepadaku satu surat, yang surat itu benar-benar lebih aku cintai dari seluruh apa yang disinari matahari. Kegembiraan Nabi Muhammad s.a.w. itu ialah karena ayat-ayatnya menerangkan tentang kemenangan yang akan diperoleh Muhammad s.a.w. dalam perjuangannya dan tentang kesempurnaan nikmat Allah kepadanya.
"
rm s
}

surat49(){
curl -s "https://api.banghasan.com/quran/format/json/surat/49" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Hujuraat 
terdiri atas 18 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Mujaadalah. Dinamai Al Hujuraat diambil dari perkataan Al Hujuraat yang terdapat pada ayat 4 surat ini. Ayat tersebut mencela para sahabat yang memanggil Nabi Muhammad SAW yang sedang berada di dalam kamar rumahnya bersama isterinya. Memanggil Nabi Muhammad SAW dengan cara dan dalam keadaan yang demikian menunjukkan sifat kurang hormat kepada beliau dan mengganggu ketenteraman beliau.
"
rm s
}

surat50(){
curl -s "https://api.banghasan.com/quran/format/json/surat/50" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Qaaf 
terdiri atas 45 ayat, termasuk golongan surat-surat Makkiyah diturunkan sesudah surat Al Murssalaat. Dinamai Qaaf karena surat ini dimulai dengan huruf Qaaf. Menurut hadits yang diriwayatkan Imam Muslim, bahwa Rasulullah SAW senang membaca surat ini pada rakaat pertama sembahyang subuh dan pada shalat hari raya. Sedang menurut riwayat Abu Daud, Al Baihaqy dan Ibnu Majah bahwa Rasulullah SAW membaca surat ini pada tiap-tiap membaca Khutbah pada hari Jum'at. Kedua riwayat ini menunjukkan bahwa surat QAAF sering dibaca Nabi Muhammad SAW di tempat-tempat umum, untuk memperingatkan manusia tentang kejadian mereka dan nikmat-nikmat yang diberikan kepadanya, begitu pula tentang hari berbangkit, hari berhisab, syurga, neraka, pahala, dosa, dsb. Surat ini dinamai juga Al Baasiqaat, diambil dari perkataan Al- Baasiqaat yang terdapat pada ayat 10 surat ini.
"
rm s
}

surat51(){
curl -s "https://api.banghasan.com/quran/format/json/surat/51" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Adz Dzaariyaat 
terdiri atas 60 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Ahqaaf. Dinamai Adz Dzaariyaat (angin yang menerbangkan), diambil dari perkataan Adz Dzaariyaat yang terdapat pada ayat pertama surat ini. Allah bersumpah dengan angin, mega, bahtera, dan malaikat yang menjadi sumber kesejahteraan dan pembawa kemakmuran. Hal ini meng- isyaratkan inayat Allah kepada hamba-hamba-Nya.
"
rm s
}

surat52(){
curl -s "https://api.banghasan.com/quran/format/json/surat/52" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Ath Thuur 
terdiri atas 49 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat As Sajdah. Dinamai Ath Thuur (Bukit) diambil dari perkataan Ath Thuur yang terdapat pada ayat pertama surat ini. Yang dimaksud dengan bukit di sini ialah bukit Thursina yang terletak di semenanjung Sinai, tempat Nabi Musa menerima wahyu dari Tuhannya.
"
rm s
}

surat53(){
curl -s "https://api.banghasan.com/quran/format/json/surat/53" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat An Najm 
terdiri atas 62 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Ikhlash. Nama An Najm (bintang), diambil dari perkataan  An Najm yang terdapat pada ayat pertama surat ini. Allah bersumpah dengan An Najm (bintang) adalah karena bintang-bintang yang timbul dan tenggelam, amat besar manfaatnya bagi manusia, sebagai pedoman bagi manusia dalam melakukan pelayaran di lautan, dalam perjalanan di padang pasir, untuk menentukan peredaran musim dan sebagainya.
"
rm s
}

surat54(){
curl -s "https://api.banghasan.com/quran/format/json/surat/54" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Qamar 
terdiri atas 55 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesedah surat Ath Thaariq. Nama Al Qamar (bulan) diambil dari perkataan Al Qamar yang terdapat pada ayat pertama surat ini. Pada ayat ini diterangkan tentang terbelahnya bulan sebagai mukjizat Nabi Muhammad s.a.w.
"
rm s
}

surat55(){
curl -s "https://api.banghasan.com/quran/format/json/surat/55" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Ar Rahmaan 
terdiri atas 78 ayat, termasuk golongan surat- surat Makkiyyah, diturunkan sesudah surat Ar Ra'du. Dinamai Ar Rahmaan (Yang Maha Pemurah), diambil dari perkataan Ar Rahmaan yang terdapat pada ayat pertama surat ini. Ar Rahmaan adalah salah satu dari nama-nama Allah. Sebagian besar dari surat ini menerangkan kepemurahan Allah s.w.t. kepada hamba-hamba-Nya, yaitu dengan memberikan nikmat-nikmat yang tidak terhingga baik di dunia maupun di akhirat nanti.
"
rm s
}

surat56(){
curl -s "https://api.banghasan.com/quran/format/json/surat/56" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Waaqi'ah 
terdiri atas 96 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Thaa Haa. \tDinamai dengan Al Waaqi'ah (Hari Kiamat), diambil dari perkataan Al Waaqi'ah yang terdapat pada ayat pertama surat ini.
"
rm s
}


surat57(){
curl -s "https://api.banghasan.com/quran/format/json/surat/57" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Hadiid 
terdiri atas 29 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Az Zalzalah. Dinamai Al Hadiid (Besi), diambil dari perkataan Al Hadiid yang terdapat pada ayat 25 surat ini.
"
rm s
}

surat58(){
curl -s "https://api.banghasan.com/quran/format/json/surat/58" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4,$5'} | sed '$d'
printf "
keterangan: Surat Al Mujaadilah 
terdiri atas 22 ayat, termasuk golongan surat Madaniyyah, diturunkan sesudah surat Al Munaafiquun. Surat ini dinamai dengan Al Mujaadilah (wanita yang mengajukan gugatan) karena pada awal surat ini disebutkan bantahan seorang perempuan, menurut riwayat bernama Khaulah binti Tsa'labah terhadap sikap suaminya yang telah menzhiharnya. Hal ini diadukan kepada Rasulullah s.a.w. dan ia menuntut supaya beliau memberikan putusan yang adil dalam persoalan itu. Dinamai juga Al Mujaadalah yang berarti perbantahan.
"
rm s
}

surat59(){
curl -s "https://api.banghasan.com/quran/format/json/surat/59" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Hasyr 
terdiri atas 24 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Bayyinah. Dinamai surat Al Hasyr (pengusiran) diambil dari perkataan Al-Hasyr yang terdapat pada ayat 2 surat ini. Di dalam surat ini disebutkan  kisah pengusiran suatu suku Yahudi yang bernama Bani Nadhir yang berdiam  di sekitar kota Madinah.
"
rm s
}

surat60(){
curl -s "https://api.banghasan.com/quran/format/json/surat/60" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'} | sed '$d'
printf "
keterangan: Surat Al Mumtahanah 
terdiri atas 13 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Ahzab. Dinamai Al Mumtahanah (wanita yang diuji), diambil dari kata "Famtahinuuhunna" yang berarti maka ujilah mereka, yang terdapat pada ayat 10 surat ini.
"
rm s
}

surat61(){
curl -s "https://api.banghasan.com/quran/format/json/surat/61" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat Ash Shaff 
terdiri atas 14 ayat termasuk golongan surat-surat Madaniyyah. Dinamai dengan Ash Shaff, karena pada ayat 4 surat ini terdapat kata Shaffan yang berarti satu barisan. Ayat ini menerangkan apa yang diridhai Allah sesudah menerangkan apa yang dimurkai-Nya. Pada ayat 3 diterangkan bahwa Allah murka kepada orang yang hanya pandai berkata saja tetapi tidak melaksanakan apa yang diucapkannya. Dan pada ayat 4 diterangkan bahwa Allah menyukai orang yang mempraktekkan apa yang diucapkannya yaitu orang-orang yang berperang pada jalan Allah dalam satu barisan.
"
rm s
}

surat62(){
curl -s "https://api.banghasan.com/quran/format/json/surat/62" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat Al Jumu'ah ini 
terdiri atas 11 ayat, termasuk golongan-golongan surat-surat Madaniyyah dan diturunkan sesudah surat Ash Shaf. Nama surat Al Jumu'ah diambil dari kata Al Jumu'ah yang terdapat pada ayat 9 surat ini yang artinya: hari Jum'at
"
rm s
}

surat63(){
curl -s "https://api.banghasan.com/quran/format/json/surat/63" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 11 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Hajj. Surat ini dinamai Al-Munaafiquun  yang artinya orang-orang munafik, karena surat ini mengungkapkan  sifat-sifat orang-orang munafik.
"
rm s
}

surat64(){
curl -s "https://api.banghasan.com/quran/format/json/surat/64" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4,$5'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 18 ayat, termasuk golongan surat-surat Madaniyyah dan diturunkan sesudah surat At Tahrim. Nama At Taghaabun diambil dari kata At Taghaabun yang terdapat pada ayat ke 9 yang artinya hari dinampakkan kesalahan-kesalahan.
"
rm s
}

surat65(){
curl -s "https://api.banghasan.com/quran/format/json/surat/65" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat ini 
terdiri atas 12 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Insaan. Dinamai surat Ath Thalaaq karena kebanyakan ayat-ayatnya mengenai masalah talak dan yang berhubungan dengan masalah itu.
"
rm s
}

surat66(){
curl -s "https://api.banghasan.com/quran/format/json/surat/66" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 12 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Al Hujuraat. Dinamai surat At Tahrim karena pada awal surat ini terdapat kata tuharrim yang kata asalnya adalah Attahrim yang berarti mengharamkan.
"
rm s
}

surat67(){
curl -s "https://api.banghasan.com/quran/format/json/surat/67" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 30 ayat, termasuk golongan surat-surat  Makkiyah, diturunkan sesudah Ath Thuur. Nama Al Mulk diambil dari kata Al Mulk yang terdapat pada ayat pertama surat ini yang artinya kerajaan atau kekuasaan. Dinamai pula surat ini dengan At Tabaarak (Maha Suci).
"
rm s
}

surat68(){
curl -s "https://api.banghasan.com/quran/format/json/surat/68" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 52 ayat,termasuk golongan surat-surat Makkiyah,diturunkan sesudah surat Al Alaq. Nama Al Qalam diambil dari kata Al Qalam yang terdapat pada ayat pertama surat iniyang artinya pena. Surat ini dinamai pula dengan surat Nun (huruf nun).
"
rm s
}

surat69(){
curl -s "https://api.banghasan.com/quran/format/json/surat/69" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 52 ayat,termasuk golongan surat-surat Makkiyah,diturunkan sesudah surat Al Mulk.  Nama Al Haaqqah diambil dari kata Al Haaqqah yang terdapat pada ayat pertama surat ini yang artinya hari kiamat
"
rm s
}

surat70(){
curl -s "https://api.banghasan.com/quran/format/json/surat/70" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 44 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Haaqqah.Perkataan Al Ma'arij yang menjadi nama bagi surat ini adalah kata jamak dari Mi'raj, diambil dari perkataan Al Ma'arij yang terdapat pada ayat 3, yang artinya menurut bahasa tempat naik. Sedang para ahli  tafsir memberi arti bermacam-macam, di antaranya langit, nikmat karunia dan derajat atau tingkatan yang diberikan Allah s.w.t kepada ahli surga.
"
rm s
}

surat71(){
curl -s "https://api.banghasan.com/quran/format/json/surat/71" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat ini 
terdiri atas 28 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat An Nahl. Dinamakan dengan surat Nuh karena surat ini seluruhnya menjelaskan da'wah dan doa Nabi Nuh a.s.
"
rm s
}

surat72(){
curl -s "https://api.banghasan.com/quran/format/json/surat/72" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Jin 
terdiri atas 28 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al A'raaf. Dinamai Al Jin diambil dari perkataan Al Jin yang terdapat  pada ayat pertama surat ini. Pada ayat tersebut dan ayat-ayat berikutnya  diterangkan bahwa Jin sebagai makhluk halus telah mendengar pembacaan  Al Quran dan mereka mengikuti ajaran Al Quran tersebut.
"
rm s
}

surat73(){
curl -s "https://api.banghasan.com/quran/format/json/surat/73" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Al Muzzammil 
terdiri atas 20 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Qalam.Dinamai Al Muzzammil (orang yang berselimut) diambil dari perkataan Al Muzzammil yang terdapat pada ayat pertama surat ini. Yang dimaksud dengan orang yang berkemul ialah Nabi Muhammad s.a.w.
"
rm s
}

surat74(){
curl -s "https://api.banghasan.com/quran/format/json/surat/74" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Al Muddatstsir 
terdiri atas 56 ayat, termasuk golongan  surat-surat Makkiyah, diturunkan sesudah surat Al Muzzammil. Dinamai Al Muddatstsir (orang yang berkemul) diambil dari perkataan Al Muddatstsir yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat75(){
curl -s "https://api.banghasan.com/quran/format/json/surat/75" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Qiyaamah 
terdiri atas 40 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Qaari'ah. Dinamai Al Qiyaamah (hari kiamat) diambil dari perkataan Al Qiyaamah yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat76(){
curl -s "https://api.banghasan.com/quran/format/json/surat/76" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Insaan 
terdiri atas 31 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Ar Rahmaan. Dinamai al Insaan (manusia) diambil dari perkataan Al Insaan yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat77(){
curl -s "https://api.banghasan.com/quran/format/json/surat/77" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Al Mursalaat 
terdiri atas 50 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Humazah. Dinamai Al Mursalaat (Malaikat-Malaikat yang diutus), diambil dari perkataan Al Mursalaat yang terdapat pada ayat pertama surat ini. Dinamai juga Amma yatasaa aluun diambil dari perkataan Amma yatasaa aluun yang terdapat pada ayat 1 surat ini.
"
rm s
}

surat78(){
curl -s "https://api.banghasan.com/quran/format/json/surat/78" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat An Naba´ 
terdiri atas 40 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Ma´aarij. Dinamai An Naba´ (berita besar) diambil dari perkataan An Naba´ yang terdapat pada ayat 2 surat ini. Dinamai juga Amma yatasaa aluun diambil dari perkataan Amma yatasaa aluun yang terdapat pada ayat 1 surat ini.
"
rm s
}

surat79(){
curl -s "https://api.banghasan.com/quran/format/json/surat/79" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4,$5'}
printf "
keterangan: Surat An Naazi´aat 
terdiri atas 46 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat An Naba´. Dinamai An Naazi´aat diambil dari perkataan An Naazi´aat yang terdapat pada ayat pertama surat ini. Dinamai pula as Saahirah yang diambil dari ayat 14, dinamai juga Ath Thaammah diambil dari ayat 34.
"
rm s
}

surat80(){
curl -s "https://api.banghasan.com/quran/format/json/surat/80" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat 'Abasa 
terdiri atas 42 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat An Najm. Dinamai 'Abasa diambil dari perkataan 'Abasa yang terdapat pada ayat pertama surat ini. Menurut riwayat, pada suatu ketika Rasulullah s.a.w. menerima dan berbicara dengan pemuka-pemuka Quraisy yang beliau harapkan agar mereka masuk Islam. Dalam pada itu datanglah Ibnu Ummi Maktum, seorang sahabat yang buta yang mengharap agar Rasulullah s.a.w. membacakan kepadanya ayat- ayat Al Quran yang telah diturunkan Allah. tetapi Rasulullah s.a.w. bermuka masam dan memalingkan muka dari Ibnu Ummi Maktum yang buta itu, lalu Allah menurunkan surat ini sebagai teguran atas sikap Rasulullah terhadap ibnu Ummi Maktum itu.
"
rm s
}

surat81(){
curl -s "https://api.banghasan.com/quran/format/json/surat/81" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat At Takwir 
terdiri atas 29 ayat dan termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Masadd. Kata At Takwir (terbelah) yang menjadi nama bagi surat ini adalah dari kata asal (mashdar) dari kata kerja kuwwirat (digulung) yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat82(){
curl -s "https://api.banghasan.com/quran/format/json/surat/82" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat ini 
terdiri atas 19 ayat, termasuk golongan surat-surat Makkiyah dan diturunkan sesudah surat An Naazi'aat. Al Infithaar yang dijadikan  nama untuk surat ini adalah kata asal dari kata Infatharat (terbelah)  yang terdapat pada ayat pertama.
"
rm s
}

surat83(){
curl -s "https://api.banghasan.com/quran/format/json/surat/83" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat ini 
terdiri atas 36 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al 'Ankabuut dan merupakan  surat yang terakhir di Mekkah sebelum hijrah. Al Muthaffifiin  yang dijadikan nama bagi surat ini diambil dari kata Al Muthaffifiin yang terdapat pada ayat pertama.
"
rm s
}

surat84(){
curl -s "https://api.banghasan.com/quran/format/json/surat/84" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Insyiqaaq, 
terdiri atas 25 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Infithaarr. Dinamai Al Insyiqaaq (terbelah), diambil dari perkataan Insyaqqat yang terdapat pada permulaan surat ini, yang pokok katanya ialah insyiqaaq.
"
rm s
}

surat85(){
curl -s "https://api.banghasan.com/quran/format/json/surat/85" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Buruuj 
terdiri atas 22 ayat, termasuk golongan surat-surat Makkiyyah diturunkan sesudah surat Asy-Syams.Dinamai Al Buruuj (gugusan bintang) diambil dari perkataan Al Buruuj yang terdapat pada ayat 1 surat ini.
"
rm s
}

surat86(){
curl -s "https://api.banghasan.com/quran/format/json/surat/86" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4,$5,$6'}
printf "
keterangan: Surat Ath Thaariq 
terdiri atas 17 ayat, termasuk golongan surat-surat Makkiyah,  diturunkan sesudah surat Al Balad.  Dinamai Ath Thaariq (yang datang di malam hari) diambil dari  perkataan Ath Thaariq yang terdapat pada ayat 1 surat ini.
"
rm s
}

surat87(){
curl -s "https://api.banghasan.com/quran/format/json/surat/87" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 19 ayat, termasuk golongan surat-surat Makkiyyah, dan diturunkan sesudah surat At Takwiir. Nama Al A´laa diambil dari kata Al A´laa yang terdapat pada ayat pertama, berarti Yang Paling Tinggi. Muslim meriwayatkan dalam kitab Al Jumu'ah, dan diriwayatkan pula oleh Ashhaabus Sunan, dari Nu'man ibnu Basyir bahwa Rasulullah s.a.w. pada shalat dua hari Raya (Fitri dan Adha) dan shalat Jum'at membaca surat Al A´laa pada rakaat pertama, dan surat Al Ghaasyiyah pada rakaat kedua.
"
rm s
}

surat88(){
curl -s "https://api.banghasan.com/quran/format/json/surat/88" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 26 ayat, termasuk surat-surat Makkiyah, diturunkan sesudah surat Adz Dzaariat. Nama Ghaasyiyah diambil dari kata Al Ghaasyiyah yang terdapat pada ayat pertama surat ini yang  artinya peristiwa yang dahsyat, tapi yang dimaksud adalah hari kiamat. Surat ini adalah surat yang kerap kali dibaca Nabi pada rakaat kedua  pada shalat hari-hari Raya dan shalat Jum'at
"
rm s
}

surat89(){
curl -s "https://api.banghasan.com/quran/format/json/surat/89" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 30 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Lail. Nama Al Fajr diambil dari kata Al Fajr yang terdapat pada ayat pertama surat ini yang artinya fajar.
"
rm s
}

surat90(){
curl -s "https://api.banghasan.com/quran/format/json/surat/90" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Balad 
terdiri atas 20 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Qaaf. Dinamai Al Balad, diambil dari perkataan Al Balad yang terdapat  pada ayat pertama surat ini. Yang dimaksud dengan kota di sini ialah kota Mekah.
"
rm s
}

surat91(){
curl -s "https://api.banghasan.com/quran/format/json/surat/91" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Asy Syams 
terdiri atas 15 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Qadar.  Dinamai Asy Syams (matahari) diambil dari perkataan Asy Syams yang terdapat pada ayat permulaan surat ini.
"
rm s
}

surat92(){
curl -s "https://api.banghasan.com/quran/format/json/surat/92" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat ini 
terdiri atas 21 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al A'laa. Surat ini dinamai Al Lail (malam), diambil dari perkataan Al Lail yang terdapat pada ayat pertama surat ini
"
rm s
}

surat93(){
curl -s "https://api.banghasan.com/quran/format/json/surat/93" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 11 ayat, termasuk golongan surat Makiyyah dan diturunkan sesudah surat Al Fajr. Nama Adh Dhuhaa diambil dari kata yang terdapat pada ayat pertama, artinya : waktu matahari sepenggalahan naik.
"
rm s
}

surat94(){
curl -s "https://api.banghasan.com/quran/format/json/surat/94" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 8 ayat, termasuk golongan surat-surat Makkiyah dan diturunkan sesudah surat Adh Dhuhaa. Nama Alam Nasyrah diambil dari kata Alam Nasyrah yang terdapat pada ayat pertama, yang berarti: bukankah Kami telah melapangkan.
"
rm s
}

surat95(){
curl -s "https://api.banghasan.com/quran/format/json/surat/95" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 8 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Buruuj. Nama At Tiin diambil dari kata At Tiin yang terdapat pada ayat pertama surat ini yang artinya buah Tin.
"
rm s
}

surat96(){
curl -s "https://api.banghasan.com/quran/format/json/surat/96" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al 'Alaq 
terdiri atas 19 ayat, termasuk golongan surat-surat Makkiyah. Ayat 1 sampai dengan 5 dari surat ini adalah ayat-ayat Al Quran yang pertama sekali diturunkan, yaitu di waktu Nabi Muhammad s.a.w. berkhalwat di gua Hira'. Surat ini dinamai Al 'Alaq (segumpal darah), diambil dari perkataan Alaq yang terdapat pada ayat 2 surat ini. Surat ini dinamai juga dengan Iqra atau Al Qalam.
"
rm s
}

surat97(){
curl -s "https://api.banghasan.com/quran/format/json/surat/97" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Qadr 
terdiri atas 5 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat 'Abasa. Surat ini dinamai Al Qadr (kemuliaan), diambil dari perkataan Al Qadr yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat98(){
curl -s "https://api.banghasan.com/quran/format/json/surat/98" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat Al Bayyinah 
terdiri atas 8 ayat, termasuk golongan surat-surat Madaniyyah, diturunkan sesudah surat Ath Thalaq. Dinamai Al Bayyinah (bukti yang nyata) diambil dari perkataan Al Bayyinah yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat99(){
curl -s "https://api.banghasan.com/quran/format/json/surat/99" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 8 ayat, termasuk golongan surat-surat Madaniyyah diturunkan sesudah surat An Nisaa'. Nama Al Zalzalah diambil dari kata: Zilzaal yang terdapat pada ayat pertama surat ini yang berarti goncangan.
"
rm s
}

surat100(){
curl -s "https://api.banghasan.com/quran/format/json/surat/100" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4,$5,$6'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 11 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al'Ashr. Nama Al 'Aadiyaat diambil dari kata Al 'Aadiyaat yang terdapat pada ayat pertama surat ini, artinya yang berlari kencang.
"
rm s
}

surat101(){
curl -s "https://api.banghasan.com/quran/format/json/surat/101" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 11 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Quraisy. Nama Al Qaari'ah diambil dari kata Al Qaari'ah yang terdapat pada ayat pertama, artinya mengetok dengan keras, kemudian kata ini dipakai untuk nama hari kiamat.
"
rm s
}

surat102(){
curl -s "https://api.banghasan.com/quran/format/json/surat/102" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat At Takaatsur 
terdiri atas 8 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Kautsar. Dinamai At Takaatsur (bermegah-megahan) diambil dari perkataan At Takaatsur yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat103(){
curl -s "https://api.banghasan.com/quran/format/json/surat/103" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al 'Ashr 
terdiri atas 3 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Alam Nasyrah. Dinamai Al 'Ashr (masa) diambil dari perkataan Al 'Ashr yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat104(){
curl -s "https://api.banghasan.com/quran/format/json/surat/104" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Humazah 
terdiri atas 9 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Qiyaamah. Dinamai Al Humazah (pengumpat) diambil dari perkataan Humazah yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat105(){
curl -s "https://api.banghasan.com/quran/format/json/surat/105" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "

"
rm s
}

surat106(){
curl -s "https://api.banghasan.com/quran/format/json/surat/106" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 4 ayat, termasuk golongan surat-surat Makkiyyah dan diturunkan sesudah surat At Tiin. Nama Quraisy diambil dari kata Quraisy yang terdapat pada ayat pertama, artinya suku Quraisy. Suku Quraisy adalah suku yang mendapat  kehormatan untuk memelihara Ka'bah.
"
rm s
}

surat107(){
curl -s "https://api.banghasan.com/quran/format/json/surat/107" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "

"
rm s
}

surat108(){
curl -s "https://api.banghasan.com/quran/format/json/surat/108" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4,$5'}
printf "
keterangan: Surat Al Kautsar 
terdiri atas 3 ayat, termasuk golongan surat-surat  Makkiyyah diturunkan sesudah surat Al 'Aadiyaat. Dinamai Al Kautsar (nikmat yang banyak) diambil dari perkataan Al Kautsar yang terdapat pada ayat pertama surat ini.Surat ini sebagai penghibur hati Nabi Muhammad s.a.w.
"
rm s
}

surat109(){
curl -s "https://api.banghasan.com/quran/format/json/surat/109" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat Al Kaafiruun 
terdiri atas 6 ayat, termasuk golongan surat-surat  Makkiyyah, diturunkan sesudah surat Al Maa'uun. Dinamai Al Kaafiruun (orang-orang kafir), diambil dari perkataan Al Kaafiruun yang terdapat pada ayat pertama surat ini.
"
rm s
}

surat110(){
curl -s "https://api.banghasan.com/quran/format/json/surat/110" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'}
printf "
keterangan: Surat An Nashr 
terdiri atas 3 ayat, termasuk golongan surat-surat  Madaniyyah yang diturunkan di Mekah sesudah surat At Taubah.  Dinamai An Nashr (pertolongan) diambil dari perkataan Nashr yang  terdapat pada ayat pertama surat ini.
"
rm s
}

surat111(){
curl -s "https://api.banghasan.com/quran/format/json/surat/111" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 5 ayat, termasuk golongan surat-surat Makkiyyah, diturunkan sesudah surat Al Fath. Nama Al Lahab diambil dari kata Al Lahab yang terdapat pada ayat ketiga surat ini yang artinya gejolak  api. Surat ini juga dinamakan surat Al Masad
"
rm s
}

surat112(){
curl -s "https://api.banghasan.com/quran/format/json/surat/112" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3,$4'}
printf "
keterangan: Surat ini 
terdiri atas 4 ayat, termasuk golongan surat-surat  Makkiyyah, diturunkan sesudah sesudah surat An Naas. Dinamakan Al Ikhlas karena surat ini sepenuhnya menegaskan kemurnian keesaan Allah s.w.t.
"
rm s
}

surat113(){
curl -s "https://api.banghasan.com/quran/format/json/surat/113" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 5 ayat, termasuk golongan surat-surat Makkiyah, diturunkan sesudah surat Al Fiil. Nama Al Falaq diambil dari kata Al Falaq yang terdapat pada ayat pertama surat ini yang artinya waktu subuh. Diriwayatkan oleh Abu Daud, At Tirmizi dan An Nasa-i dari 'Uqbah bin 'Aamir bahwa Rasulullah s.a.w. bersembahyang dengan membaca surat Al Falaq  dan surat An Naas dalam perjalanan.
"
rm s
}

surat114(){
curl -s "https://api.banghasan.com/quran/format/json/surat/114" >> s
cat s | grep -i "surat" | sed '$d' | tr -d '":' | awk {'print $1,"ke: "$2'}
cat s | grep -i "nama" | sed '$d' | tr -d '":,' | awk {'print $1,"surat: "$2,$3'}
cat s | grep -i "ayat" | sed '$d' | tr -d '",' | awk {'print $1,$2'}
cat s | grep -i "arti" | tr -d '":,' | awk {'print $1"nya:",$2,$3'} | sed '$d'
printf "
keterangan: Surat ini 
terdiri atas 6 ayat, termasuk golongan surat-surat Makkiyah,  diturunkan sesudah surat Al Falaq. Nama An Naas diambil dari An Naas yang berulang kali disebut dalam surat ini yang artinya manusia.
"
rm s
}
load(){
 clear
 printf "\033[39;1m[${c}•\033[39;1m]${m}Scaning\033[39;1m"
 sleep 0.5
 printf "."
 sleep 0.5
 printf "."
 sleep 0.5
 printf "."
 sleep 0.5
 printf ".\n"
 }
 
 putar(){
 printf "${w}[${c}√${w}]${c}Putar Mp3 Surah Al-Fatihah Nya${m}[${w}Y${m}/${b}T${m}]:"
 read o;
 if [ $o = Y ] || [ $o = y ];then
 mpv al-fatihah.mp3
 
 elif [ $o = T ] || [ $o = t ];then
 exit
 fi
 }
 

if [ $p = 01 ] || [ $p = 1 ];then
load
surat1

elif [ $p = 02 ] || [ $p = 2 ];then
load
surat2

elif [ $p = 03 ] || [ $p = 3 ];then
load
surat3

elif [ $p = 04 ] || [ $p = 4 ];then
load
surat4

elif [ $p = 05 ] || [ $p = 5 ];then
load
surat5

elif [ $p = 06 ] || [ $p = 6 ];then
load
surat6

elif [ $p = 07 ] || [ $p = 7 ];then
load
surat7

elif [ $p = 08 ] || [ $p = 8 ];then
load
surat8

elif [ $p = 09 ] || [ $p = 9 ];then
load
surat9

elif [ $p = 10 ];then
load
surat10

elif [ $p = 11 ];then
load
surat11

elif [ $p = 11 ];then
load
surat11

elif [ $p = 12 ];then
load
surat12

elif [ $p = 13 ];then
load
surat13

elif [ $p = 14 ];then
load
surat14

elif [ $p = 15 ];then
load
surat15

elif [ $p = 16 ];then
load
surat16

elif [ $p = 17 ];then
load
surat17

elif [ $p = 18 ];then
load
surat18

elif [ $p = 19 ];then
load
surat19

elif [ $p = 20 ];then
load
surat20

elif [ $p = 21 ];then
load
surat21

elif [ $p = 22 ];then
load
surat22

elif [ $p = 23 ];then
load
surat23

elif [ $p = 24 ];then
load
surat24

elif [ $p = 25 ];then
load
surat25

elif [ $p = 26 ];then
load
surat26

elif [ $p = 27 ];then
load
surat27

elif [ $p = 28 ];then
load
surat28

elif [ $p = 29 ];then
load
surat29

elif [ $p = 30 ];then
load
surat30

elif [ $p = 31 ];then
load
surat31

elif [ $p = 32 ];then
load
surat32

elif [ $p = 33 ];then
load
surat33

elif [ $p = 34 ];then
load
surat34

elif [ $p = 35 ];then
load
surat35

elif [ $p = 36 ];then
load
surat36

elif [ $p = 37 ];then
load
surat37

elif [ $p = 38 ];then
load
surat38

elif [ $p = 39 ];then
load
surat39

elif [ $p = 40 ];then
load
surat40

elif [ $p = 41 ];then
load
surat41

elif [ $p = 42 ];then
load
surat42

elif [ $p = 43 ];then
load
surat43

elif [ $p = 44 ];then
load
surat44

elif [ $p = 45 ];then
load
surat45

elif [ $p = 46 ];then
load
surat46

elif [ $p = 47 ];then
load
surat47

elif [ $p = 48 ];then
load
surat48

elif [ $p = 49 ];then
load
surat49

elif [ $p = 50 ];then
load
surat50

elif [ $p = 51 ];then
load
surat51

elif [ $p = 52 ];then
load
surat52

elif [ $p = 53 ];then
load
surat53

elif [ $p = 54 ];then
load
surat54

elif [ $p = 55 ];then
load
surat55

elif [ $p = 56 ];then
load
surat56

elif [ $p = 57 ];then
load
surat57

elif [ $p = 58 ];then
load
surat58

elif [ $p = 59 ];then
load
surat59

elif [ $p = 60 ];then
load
surat60

elif [ $p = 61 ];then
load
surat61

elif [ $p = 62 ];then
load
surat62

elif [ $p = 63 ];then
load
surat63

elif [ $p = 64 ];then
load
surat64

elif [ $p = 65 ];then
load
surat65

elif [ $p = 66 ];then
load
surat66

elif [ $p = 67 ];then
load
surat67

elif [ $p = 68 ];then
load
surat68

elif [ $p = 69 ];then
load
surat69

elif [ $p = 70 ];then
load
surat70

elif [ $p = 71 ];then
load
surat71

elif [ $p = 72 ];then
load
surat72

elif [ $p = 73 ];then
load
surat73

elif [ $p = 74 ];then
load
surat74

elif [ $p = 75 ];then
load
surat75

elif [ $p = 76 ];then
load
surat76

elif [ $p = 77 ];then
load
surat77

elif [ $p = 78 ];then
load
surat78

elif [ $p = 79 ];then
load
surat79

elif [ $p = 80 ];then
load
surat80

elif [ $p = 81 ];then
load
surat81

elif [ $p = 82 ];then
load
surat82

elif [ $p = 83 ];then
load
surat83

elif [ $p = 84 ];then
load
surat84

elif [ $p = 85 ];then
load
surat85

elif [ $p = 86 ];then
load
surat86

elif [ $p = 87 ];then
load
surat87

elif [ $p = 88 ];then
load
surat88

elif [ $p = 89 ];then
load
surat89

elif [ $p = 90 ];then
load
surat90

elif [ $p = 91 ];then
load
surat91

elif [ $p = 92 ];then
load
surat92

elif [ $p = 93 ];then
load
surat93

elif [ $p = 94 ];then
load
surat94

elif [ $p = 95 ];then
load
surat95

elif [ $p = 96 ];then
load
surat96

elif [ $p = 97 ];then
load
surat97

elif [ $p = 98 ];then
load
surat98

elif [ $p = 99 ];then
load
surat99

elif [ $p = 100 ];then
load
surat100

elif [ $p = 101 ];then
load
surat101

elif [ $p = 102 ];then
load
surat102

elif [ $p = 103 ];then
load
surat103

elif [ $p = 104 ];then
load
surat104

elif [ $p = 105 ];then
load
surat105

elif [ $p = 106 ];then
load
surat106

elif [ $p = 107 ];then
load
surat107

elif [ $p = 108 ];then
load
surat108

elif [ $p = 109 ];then
load
surat109

elif [ $p = 110 ];then
load
surat110

elif [ $p = 111 ];then
load
surat111

elif [ $p = 112 ];then
load
surat112

elif [ $p = 113 ];then
load
surat113

elif [ $p = 114 ];then
load
surat114

else 
printf "\n${h}          ~ ~  ┌${w}∩${h}┐${k}(${m}◣${w}_${m}◢${k})${h}┌${w}∩${h}┐  ~ ~\n"
printf "          ${w}[${m}!${w}]${m} pilihan salah ${w}[${m}!${w}]${k}\n"
sleep 1
bash surah.sh
fi"  ${@/v\"Sv4t/>.Up&\{g}  ${@} | $*   \b$'a\u0073'e""64   -d "${@}"     )" ${@~}  